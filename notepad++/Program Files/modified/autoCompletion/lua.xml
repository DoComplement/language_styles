<?xml version="1.0" encoding="UTF-8" ?>
<NotepadPlus>
    <Environment ignoreCase="yes" startFunc="(" stopFunc=")" paramSeparator="," terminal=";" additionalWordChar=".:" />
    <AutoComplete language="LUA">
        <KeyWord name="and" func="no" />
        <KeyWord name="assert" func="yes">
            <Overload retVal="variant" descr="
Issues an error when the value of its argument v is false (i.e., nil or false);
otherwise, returns all its arguments. message is an error message; when absent, it 
defaults to &#34;assertion failed!&#34;
        ">
                <Param name="v: variant" />
                <Param name="message: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="appendfile" func="yes">
            <Overload retVal="variant" descr="
Appends content to the file contents at path. If the file does not exist, it errors.
        ">
                <Param name="path: string" />
                <Param name="content: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="Axes.new" func="yes">
            <Overload retVal="Axes object" descr="
Creates a new Axes using list of axes and/or faces. NormalIds (faces) are converted to the corresponding axes.
        ">
                <Param name="axes: Tuple&lt;Axes&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.arshift" func="yes">
            <Overload retVal="number" descr="
Returns the number x shifted disp bits to the right. The number disp may be any representable integer. Negative displacements shift to the left.

This shift operation is what is called arithmetic shift. Vacant bits on the left are filled with copies of the higher bit of x; vacant bits on the right are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero or 0xFFFFFFFF (all original bits are shifted out).
        ">
                <Param name="x: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.band" func="yes">
            <Overload retVal="number" descr="
Returns the bitwise and of its operands.(all original bits are shifted out).
        ">
                <Param name="nums: Tuple&lt;number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.bnot" func="yes">
            <Overload retVal="number" descr="
Returns the bitwise negation of x. For any integer x, the following identity holds:
        ">
                <Param name="x: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.bor" func="yes">
            <Overload retVal="number" descr="
Returns the bitwise or of its operands.
        ">
                <Param name="nums: Tuple&lt;number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.btest" func="yes">
            <Overload retVal="boolean" descr="
Returns a boolean signalling whether the bitwise and of its operands is different from zero.
        ">
                <Param name="nums: Tuple&lt;number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.bxor" func="yes">
            <Overload retVal="number" descr="
Returns the bitwise exclusive-or of its operands.
        ">
                <Param name="nums: Tuple&lt;number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.countlz" func="yes">
            <Overload retVal="number" descr="
Returns the number of consecutive zero bits in the 32-bit representation of the provided number starting from the left-most (most significant) bit. Returns 32 if the provided number is zero.
        ">
                <Param name="n: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.countrz" func="yes">
            <Overload retVal="number" descr="
Returns the number of consecutive zero bits in the 32-bit representation of the provided number starting from the right-most (least significant) bit. Returns 32 if the provided number is zero.
        ">
                <Param name="n: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.extract" func="yes">
            <Overload retVal="number" descr="
Returns the unsigned number formed by the bits field to field + width - 1 from n. Bits are numbered from 0 (least significant) to 31 (most significant). All accessed bits must be in the range [0, 31]. The default for width is 1.
        ">
                <Param name="n: uint" />
                <Param name="field: int" />
                <Param name="width: int = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.replace" func="yes">
            <Overload retVal="number" descr="
Returns a copy of n with the bits field to field + width - 1 replaced by the value v. See bit32.extract() for details about field and width.
        ">
                <Param name="n: uint" />
                <Param name="v: uint" />
                <Param name="field: int" />
                <Param name="width: int = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.lrotate" func="yes">
            <Overload retVal="number" descr="
Returns the number x rotated disp bits to the left. The number disp may be any representable integer. In particular, negative displacements rotate to the right.
        ">
                <Param name="x: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.lshift" func="yes">
            <Overload retVal="number" descr="
Returns the number x shifted disp bits to the left. The number disp may be any representable integer. Negative displacements shift to the right. In any direction, vacant bits are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero (all bits are shifted out).
        ">
                <Param name="x: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.rrotate" func="yes">
            <Overload retVal="number" descr="
Returns the number x rotated disp bits to the right. The number disp may be any representable integer. In particular, negative displacements rotate to the left.
        ">
                <Param name="x: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit32.rshift" func="yes">
            <Overload retVal="number" descr="
Returns the number x shifted disp bits to the right. The number disp may be any representable integer. Negative displacements shift to the left. In any direction, vacant bits are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero (all bits are shifted out).
        ">
                <Param name="x: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.arshift" func="yes">
            <Overload retVal="int" descr="Signed-equivalent of bit32.arshift">
                <Param name="x: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.badd" func="yes">
            <Overload retVal="int" descr="Adds a with b, allows overflows.">
                <Param name="a: uint" />
                <Param name="b: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.band" func="yes">
            <Overload retVal="int" descr="Does a bitwise AND (&#38;) on &#34;val&#34; using &#34;by&#34;.">
                <Param name="val: uint" />
                <Param name="by: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.bdiv" func="yes">
            <Overload retVal="int" descr="
Divides dividend by divisor, remainder is not returned.
        ">
                <Param name="dividend: uint" />
                <Param name="divisor: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.bmul" func="yes">
            <Overload retVal="int" descr="Multiplies &#34;val&#34; using &#34;by&#34;, allows overflows.">
                <Param name="val: uint" />
                <Param name="by: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.bnot" func="yes">
            <Overload retVal="number" descr="Does a bitwise NOT (unary ~) on &#34;val&#34;.">
                <Param name="val: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.bor" func="yes">
            <Overload retVal="int" descr="Does a bitwise OR (|) on &#34;val&#34; using &#34;by&#34;.">
                <Param name="val: uint" />
                <Param name="by: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.bxor" func="yes">
            <Overload retVal="int" descr="Does a bitwise XOR (~) on &#34;val&#34; using &#34;by&#34;.">
                <Param name="val: uint" />
                <Param name="by: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.bswap" func="yes">
            <Overload retVal="int" descr="Does a bitwise swap on &#34;val&#34;.">
                <Param name="val: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.ror" func="yes">
            <Overload retVal="int" descr="Returns the &#34;val&#34; rotated right by &#34;disp&#34;.">
                <Param name="val: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.ror" func="yes">
            <Overload retVal="int" descr="Returns the &#34;val&#34; rotated right by &#34;disp&#34;.">
                <Param name="val: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.rol" func="yes">
            <Overload retVal="int" descr="Returns the &#34;val&#34; rotated left by &#34;disp&#34;.">
                <Param name="val: uint" />
                <Param name="disp: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.tohex" func="yes">
            <Overload retVal="string" descr="Converts &#34;val&#34; to a hex string.">
                <Param name="val: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.tobit" func="yes">
            <Overload retVal="string" descr="Converts &#34;val&#34; into proper form for bitwise operations.">
                <Param name="val: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.lshift" func="yes">
            <Overload retVal="int" descr="Does a left shift on &#34;val&#34; using &#34;by&#34;.">
                <Param name="val: uint" />
                <Param name="by: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="bit.rshift" func="yes">
            <Overload retVal="int" descr="Does a right shift on &#34;val&#34; using &#34;by&#34;.">
                <Param name="val: uint" />
                <Param name="by: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="BrickColor.new" func="yes">
            <Overload retVal="BrickColor object" descr="
* .new(number) : Constructs a BrickColor from its numerical index.
* .new(r, g, b) : Constructs the closest BrickColor that can be matched to the specified RGB components, each between 0 and 1.
* .new(name) : Constructs a BrickColor from its name.
* .new(Color3:color) : Constructs the closest BrickColor that can be matched to the specified Color3.
        ">
                <Param name="variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="BrickColor.palette" func="yes">
            <Overload retVal="BrickColor object" descr="Constructs a BrickColor from its palette index.">
                <Param name="paletteValue: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="BrickColor.random()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns a random BrickColor."/>
        </KeyWord>
        <KeyWord name="BrickColor.White()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;White&#34; BrickColor."/>
        </KeyWord>
        <KeyWord name="BrickColor.Gray()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;Medium stone grey&#34; BrickColor."/>
        </KeyWord>
        <KeyWord name="BrickColor.DarkGray()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;Dark stone grey&#34; BrickColor.">
            </Overload>
        </KeyWord>
        <KeyWord name="BrickColor.Black()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;Black&#34; BrickColor."/>
        </KeyWord>
        <KeyWord name="BrickColor.Red()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;Red&#34; BrickColor."/>
        </KeyWord>
        <KeyWord name="BrickColor.Yellow()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;Yellow&#34; BrickColor."/>
        </KeyWord>
        <KeyWord name="BrickColor.Green()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;Green&#34; BrickColor."/>
        </KeyWord>
        <KeyWord name="BrickColor.Blue()" func="yes">
            <Overload retVal="BrickColor object" descr="Returns the &#34;Blue&#34; BrickColor."/>
        </KeyWord>
        <KeyWord name="CellId.new" func="yes">
            <Overload retVal="table,table" descr="unknown">
                <Param name="args: Tuple?&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="CatalogSearchParams.new" func="yes">
            <Overload retVal="CatalogSearchParams object" descr="
The CatalogSearchParams data type stores the parameters of a catalog search via AvatarEditorService:SearchCatalog().

When accessing the value of the CatalogSearchParams.BundleTypes or CatalogSearchParams.AssetTypes property the returned table will be read-only to avoid confusion when not directly accessing the CatalogSearchParams instance.
        "/>
        </KeyWord>
        <KeyWord name="CFrame.new" func="yes">
            <Overload retVal="CFrame object" descr="
See CFrames : https://create.roblox.com/docs/reference/engine/datatypes/CFrame
* .new() : Returns a blank identity CFrame.
* .new(Vector3:pos) : Returns a CFrame with no rotation with the position of the provided Vector3.
* .new(Vector3:pos, Vector3:lookAt) : Returns a CFrame with the position of the first Vector3 and an orientation pointed toward the second.
* .new(x, y, z) : Returns a CFrame with a position comprised of the provided X, Y, and Z components.
* .new(x, y, z, qX, qY, qZ, qW) : Returns a CFrame from position (x, y, z) and quaternion (qX, qY, qZ, qW).
* .new(x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22) : Returns a CFrame from position (x, y, z) with an orientation specified by the rotation matrix.
        ">
                <Param name="variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="CFrame.lookAt" func="yes">
            <Overload retVal="CFrame object" descr="
Returns a CFrame with the position of the first Vector3 and an orientation pointed toward the second.
        ">
                <Param name="at: Vector3" />
                <Param name="lookAt: Vector3" />
                <Param name="up: Vector3" />
            </Overload>
        </KeyWord>
        <KeyWord name="CFrame.fromEulerAnglesXYZ" func="yes">
            <Overload retVal="CFrame object" descr="
Returns a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Z, Y, X order.
        ">
                <Param name="rx: int" />
                <Param name="ry: int" />
                <Param name="rz: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="CFrame.fromEulerAnglesYXZ" func="yes">
            <Overload retVal="CFrame object" descr="
Returns a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Z, X, Y order.
        ">
                <Param name="rx: int" />
                <Param name="ry: int" />
                <Param name="rz: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="CFrame.Angles" func="yes">
            <Overload retVal="CFrame object" descr="Equivalent to CFrame.fromEulerAnglesXYZ().">
                <Param name="rx: int" />
                <Param name="ry: int" />
                <Param name="rz: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="CFrame.fromOrientation" func="yes">
            <Overload retVal="CFrame object" descr="Equivalent to CFrame.fromEulerAnglesXYZ().">
                <Param name="rx: int" />
                <Param name="ry: int" />
                <Param name="rz: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="CFrame.fromAxisAngle" func="yes">
            <Overload retVal="CFrame object" descr="
Returns a rotated CFrame from a unit Vector3 and a rotation in radians.
        ">
                <Param name="v: Vector3" />
                <Param name="r: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="CFrame.fromMatrix" func="yes">
            <Overload retVal="CFrame object" descr="
Returns a CFrame from a translation and the columns of a rotation matrix.
        ">
                <Param name="pos: Vector3" />
                <Param name="vX: Vector3" />
                <Param name="vY: Vector3" />
                <Param name="vZ: Vector3" />
            </Overload>
        </KeyWord>
        <KeyWord name="checkcaller()" func="yes">
            <Overload retVal="boolean" descr="
Returns true if the current thread is the executor thread. Note: Checkcaller does NOT check the call stack of the function, if you call a game function then it calls out to checkcaller, the result will be true! Be careful.
        "/>
        </KeyWord>
        <KeyWord name="checkparallel()" func="yes">
            <Overload retVal="boolean" descr="Returns whether the current LocalScript has code running in parallel (multiple active threads)."/>
        </KeyWord>
        <KeyWord name="clonefunction" func="yes">
            <Overload retVal="function" descr="Returns a clone of input function f.">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="cloneref" func="yes">
            <Overload retVal="Instance" descr="Returns a replica of input Instance obj.">
                <Param name="obj: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="collectgarbage" func="yes">
            <Overload retVal="variant" descr="
This function is a generic interface to the garbage collector.
It performs different functions according to its first argument, operation:

    * &#34;stop&#34;: stops the garbage collector.
    * &#34;restart&#34;: restarts the garbage collector.
    * &#34;collect&#34;: performs a full garbage-collection cycle.
    * &#34;count&#34;: returns the total memory in use by Lua (in Kbytes).
    * &#34;step&#34;: performs a garbage-collection step. The step &#34;size&#34; is controlled by arg
        (larger values mean more steps) in a non-specified way. If you want to control
        the step size you must experimentally tune the value of arg. Returns true if
        the step finished a collection cycle.
    * &#34;setpause&#34;: sets arg as the new value for the pause of the collector (see §2.10).
        Returns the previous value for pause.
    * &#34;setstepmul&#34;: sets arg as the new value for the step multiplier of the collector
        (see §2.10). Returns the previous value for step.
">
                <Param name="operation: String" />
            </Overload>
        </KeyWord>
        <KeyWord name="Color3.new" func="yes">
            <Overload retVal="Color3 object" descr="Returns a Color3 with the given red, green, and blue values.">
                <Param name="r: int" />
                <Param name="g: int" />
                <Param name="b: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="Color3.fromRGB" func="yes">
            <Overload retVal="Color3 object" descr="Returns a Color3 from given components within the range of 0 to 255.">
                <Param name="r: int" />
                <Param name="g: int" />
                <Param name="b: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="Color3.fromHSV" func="yes">
            <Overload retVal="Color3 object" descr="Returns a Color3 from the given hue, saturation, and value components.">
                <Param name="hue: int" />
                <Param name="saturation: int" />
                <Param name="value: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="Color3.fromHex" func="yes">
            <Overload retVal="Color3 object" descr="Returns a Color3 from the given hex value.">
                <Param name="hex: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="ColorSequence.new" func="yes">
            <Overload retVal="ColorSequence object" descr="
The ColorSequence data type represents a gradient of color values from 0 to 1. The color values are expressed using the ColorSequenceKeypoint type. This type is used in various properties of ParticleEmitter, Trail, Beam, and other objects that use color gradients.

Two ColorSequence objects are equivalent only if the values of their ColorSequenceKeypoint are equivalent, even if both would result in similar gradients.
        ">
                <Param name="union&lt;Array:keypoints, Color3:&lt;c0, c1?&gt;&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ColorSequenceKeypoint.new" func="yes">
            <Overload retVal="ColorSequence object" descr="
        Returns a ColorSequenceKeypoint from the given time and color.
        ">
                <Param name="time: number" />
                <Param name="color: Color3" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.close" func="yes">
            <Overload retVal="boolean" descr="
Closes and puts the provided coroutine in a dead state. This function returns true unless the coroutine is in an error state, in which case it returns false and the error message. A coroutine that is currently running cannot be closed. A coroutine cannot be resumed after it is closed.
        ">
                <Param name="co: thread" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.create" func="yes">
            <Overload retVal="thread" descr="
Creates a new coroutine, with body f. f must be a Lua function. Returns this new
coroutine, an object with type &#34;thread&#34;.
        ">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.isyieldable()" func="yes">
            <Overload retVal="boolean" descr="
Returns true if the coroutine this function is called within can safely yield. Yielding a coroutine inside metamethods or C functions is prohibited, with the exception of pcall and xpcall.
        "/>
        </KeyWord>
        <KeyWord name="coroutine.resume" func="yes">
            <Overload retVal="boolean" descr="
Starts or continues the execution of coroutine co. The first time you resume a
coroutine, it starts running its body. The values val1, ··· are passed as the 
arguments to the body function. If the coroutine has yielded, resume restarts it; the 
values val1, ··· are passed as the results from the yield.

If the coroutine runs without any errors, resume returns true plus any values passed 
to yield (if the coroutine yields) or any values returned by the body function (if the
coroutine terminates). If there is any error, resume returns false plus the error 
message.
">
                <Param name="co: thread" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.running()" func="yes">
            <Overload retVal="thread" descr="Returns the running coroutine, or nil when called by the main thread. "/>
        </KeyWord>
        <KeyWord name="coroutine.status" func="yes">
            <Overload retVal="string" descr="
Returns the status of coroutine co, as a string: &#34;running&#34;, if the coroutine is running (that is, it called status); 
&#34;suspended&#34;, if the coroutine is suspended in a call to yield, or if it has not started running yet; 
&#34;normal&#34; if the coroutine is active but not running (that is, it has resumed another coroutine); and 
&#34;dead&#34; if the coroutine has finished its body function, or if it has stopped with an error. 
        ">
                <Param name="co: thread" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.wrap" func="yes">
            <Overload retVal="function" descr="
Creates a new coroutine, with body f. f must be a Lua function. Returns a function that resumes 
the coroutine each time it is called. Any arguments passed to the function behave as the extra 
arguments to resume. Returns the same values returned by resume, except the first boolean. In 
case of error, propagates the error. 
        ">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.yield" func="yes">
            <Overload retVal="Tuple&lt;variant&gt;" descr="
Suspends the execution of the calling coroutine. The coroutine cannot be running a C function, a 
metamethod, or an iterator. Any arguments to yield are passed as extra results to resume. 
        ">
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="DateTime.now()" func="yes">
            <Overload retVal="DateTime" descr="Returns a new DateTime representing the current moment in time."/>
        </KeyWord>
        <KeyWord name="DateTime.fromUnixTimestamp" func="yes">
            <Overload retVal="DateTime" descr="
Returns a new DateTime object from the given Unix timestamp, or the number of seconds since January 1st, 1970 at 00:00 (UTC).
        ">
                <Param name="unixTimestamp: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="DateTime.fromUnixTimestampMillis" func="yes">
            <Overload retVal="DateTime" descr="
Returns a new DateTime object from the given Unix timestamp, or the number of milliseconds since January 1st, 1970 at 00:00 (UTC).
        ">
                <Param name="unixTimestampMillis: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="DateTime.fromLocalTime" func="yes">
            <Overload retVal="DateTime" descr="
Returns a new DateTime using the given units from a local time. The values accepted are similar to those found in the time value table returned by ToLocalTime().

Date units (year, month, day) that produce an invalid date will raise an error. For example, January 32nd or February 29th on a non-leap year.
Time units (hour, minute, second, millisecond) that are outside their normal range are valid. For example, 90 minutes will cause the hour to roll over by 1; -10 seconds will cause the minute value to roll back by 1.
Non-integer values are rounded down. For example, providing 2.5 hours will be equivalent to providing 2 hours, not 2 hours 30 minutes.
Omitted values are assumed to be their lowest value in their normal range, except for year which defaults to 1970.
        ">
                <Param name="year: number = 1970" />
                <Param name="month: number = 1" />
                <Param name="day: number = 1" />
                <Param name="hour: number = 0" />
                <Param name="minute: number = 0" />
                <Param name="second: number = 0" />
                <Param name="millisecond: number = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="DateTime.fromUniversalTime" func="yes">
            <Overload retVal="DateTime" descr="
Returns a new DateTime using the given units from a UTC time. The values accepted are similar to those found in the time value table returned by ToUniversalTime().

Date units (year, month, day) that produce an invalid date will raise an error. For example, January 32nd or February 29th on a non-leap year.
Time units (hour, minute, second, millisecond) that are outside their normal range are valid. For example, 90 minutes will cause the hour to roll over by 1; -10 seconds will cause the minute value to roll back by 1.
Non-integer values are rounded down. For example, providing 2.5 hours will be equivalent to providing 2 hours, not 2 hours 30 minutes.
Omitted values are assumed to be their lowest value in their normal range, except for year which defaults to 1970.
        ">
                <Param name="year: number = 1970" />
                <Param name="month: number = 1" />
                <Param name="day: number = 1" />
                <Param name="hour: number = 0" />
                <Param name="minute: number = 0" />
                <Param name="second: number = 0" />
                <Param name="millisecond: number = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="DateTime.fromIsoDate" func="yes">
            <Overload retVal="DateTime" descr="
Returns a DateTime from an ISO 8601 date-time string in UTC time, such as those returned by ToIsoDate(). If the string parsing fails, the function returns nil.

An example ISO 8601 date-time string would be 2020-01-02T10:30:45Z, which represents January 2nd 2020 at 10:30 AM, 45 seconds.
        ">
                <Param name="isoDate: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.dumpheap()" func="yes">
            <Overload retVal="void" descr="Can only be called from CommandBar. Saves a Luau heap to a (luauheap_%Y%m%d-%H%M%S.json) file."/>
        </KeyWord>
        <KeyWord name="debug.getconstant" func="yes">
            <Overload retVal="variant" descr="
Returns the constant at index idx in function fi or level fi.
        ">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getconstants" func="yes">
            <Overload retVal="table" descr="Retrieve the constants in function fi or at level fi.">
                <Param name="fi: union&lt;function, number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getfenv" func="yes">
            <Overload retVal="void" descr="Returns the environment of f. ">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getinfo" func="yes">
            <Overload retVal="table" descr="Returns a table of info pertaining to the lua function fi.">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="w: string = &#34;flnSu&#34;" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getlocal" func="yes">
            <Overload retVal="variant" descr="Returns the local with name localname in level.">
                <Param name="level: int" />
                <Param name="localname: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getlocals" func="yes">
            <Overload retVal="table" descr="Returns a table containing the upvalues at level.">
                <Param name="level: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getmetatable" func="yes">
            <Overload retVal="table" descr="Returns the metatable of the given object or nil if it does not have a metatable. ">
                <Param name="object: userdata" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getproto" func="yes">
            <Overload retVal="union&lt;function, table&lt;function>&gt;" descr="
Gets the inner function of f at index.
Note if activated is true, instead it will return a table of functions. These are the instances of that function that exist within the GC.
        ">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: int" />
                <Param name="isActivated: boolean?" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getprotos" func="yes">
            <Overload retVal="table" descr="
Returns a table containing the inner functions of function f. Note these functions will not have upvalues, use debug.getproto with activated true to get a list of instances.
        ">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getregistry()" func="yes">
            <Overload retVal="table" descr="Returns the Lua registry."/>
        </KeyWord>
        <KeyWord name="debug.getstack" func="yes">
            <Overload retVal="table" descr="Gets the method stack at level &#34;idx&#34;.">
                <Param name="idx: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getupvalue" func="yes">
            <Overload retVal="variant" descr="Retrieve the upvalues in function fi or at level fi.">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.getupvalues" func="yes">
            <Overload retVal="table" descr="Retrieve the upvalues in function fi or at level fi.">
                <Param name="fi: union&lt;function, number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.info" func="yes">
            <Overload retVal="int" descr="
Retrieves information about a specific function or function invocation, based on the character tag provided. See tags:
* &#34;f&#34;: returns function that is running at the given level;
* &#34;l&#34;: returns the field currentline;
* &#34;n&#34;: returns the fields name and namewhat;
* &#34;r&#34;: returns the fields ftransfer and ntransfer;
* &#34;S&#34;: returns the fields source, short_src, linedefined, lastlinedefined, and what;
* &#34;t&#34;: returns the field istailcall;
* &#34;u&#34;: returns the fields nups, nparams, and isvararg;
        ">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="tag: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.loadmodule" func="yes">
            <Overload retVal="int" descr="
Returns the function object that represents the module, without evaluating that module. This is necessary for some unit testing workflows for global injection, but this means that there is no cache of the resulting data.
        ">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="tag: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.profilebegin" func="yes">
            <Overload retVal="void" descr="Starts profiling for a MicroProfiler label.">
                <Param name="label: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.profileend()" func="yes">
            <Overload retVal="void" descr="Stops profiling for the most recent MicroProfiler label that debug.profilebegin(&#34;...&#34;) opened."/>
        </KeyWord>
        <KeyWord name="debug.resetmemorycategory()" func="yes">
            <Overload retVal="void" descr="Resets the tag assigned by debug.setmemorycategory() to the automatically assigned value (typically, the script name)."/>
        </KeyWord>
        <KeyWord name="debug.setconstant" func="yes">
            <Overload retVal="void" descr="Set constant idx to tuple value at level or function fi.">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: union&lt;string, int&gt;" />
                <Param name="value: union&lt;number, boolean, nil, string&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.setlocal" func="yes">
            <Overload retVal="void" descr="Set local localname to value value at level lvl.">
                <Param name="level: int" />
                <Param name="localname: string" />
                <Param name="value: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.setmemorycategory" func="yes">
            <Overload retVal="void" descr="
Assigns a custom tag name to the current thread&#34;s memory category in the Developer Console. Useful for analyzing memory usage of multiple threads in the same script which would otherwise be grouped together under the same tag/name.">
                <Param name="tag: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.setmetatable" func="yes">
            <Overload retVal="table" descr="Set the metatable of &#34;og&#34; to &#34;mt&#34;.">
                <Param name="og: table" />
                <Param name="mt: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.setstack" func="yes">
            <Overload retVal="void" descr="
Set the stack indice at level &#34;idx&#34; to value &#34;val&#34; at level or function fi.
        ">
                <Param name="fi: union&lt;function, int&gt;" />
                <Param name="idx: int" />
                <Param name="val: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.setupvalue" func="yes">
            <Overload retVal="void" descr="
Set upvalue idx to value value at level or function fi.
        ">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: union&lt;string, int&gt;" />
                <Param name="value: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.setupvaluename" func="yes">
            <Overload retVal="void" descr="Sets the upvalue name to Name.">
                <Param name="name: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.traceback" func="yes">
            <Overload retVal="string" descr="
Returns a string of undefined format that describes the current function call stack.
        ">
                <Param name="thread: thread" />
                <Param name="message: string = &#34;&#34;" />
                <Param name="level: number = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.traceback" func="yes">
            <Overload retVal="string" descr="
Returns a traceback of the current function call stack as a string; in other words, a description of the functions that have been called up to this point. During debugging, this behaves like an error stack trace but does not stop execution of the script.

The level parameter specifies what level of the call stack to consider, with 1 being the call of debug.traceback() itself, 2 being the call of the function calling debug.traceback(), and so on. See the code sample below for an example of sequential function calls.

The format of the returned traceback is not defined and may change at any time; use only for debug diagnostics and error analytics. It&#34;s recommended that you never parse the return value of this function for specific information, such as script names or line numbers.
        ">
                <Param name="message: string = &#34;&#34;" />
                <Param name="level: number = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="debug.validlevel" func="yes">
            <Overload retVal="string" descr="
This will allow you to check if a call-stack level actually exists or not. Makes you not need to do pcall for debug functions with stack levels.
        ">
                <Param name="level: union&lt;number,string&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="decompile" func="yes">
            <Overload retVal="string" descr="
Decompiles Script and returns the decompiled script with timeout. If the decompilation fails, then the return value will be an error message.

Note: The mode parameter is deprecated and is not used in newer versions of Synapse.
        ">
                <Param name="Script: union&lt;LocalScript, ModuleScript, function, string, proto&gt;"/>
                <Param name="mode: union?&lt;string, boolean&gt;" />
                <Param name="timeout: number?" />
            </Overload>
        </KeyWord>
        <KeyWord name="Delay" func="yes">
            <Overload retVal="void" descr="
Schedules a function to be executed after delayTime seconds have passed, without yielding the current thread. This function allows multiple Lua threads to be executed in parallel from the same stack. The delay will have a minimum duration of 29 milliseconds, but this minimum may be higher depending on the target framerate and various throttling conditions. If the delayTime parameter is not specified, the minimum duration will be used.
        ">
                <Param name="delayTime: float" />
                <Param name="callback: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="delay" func="yes">
            <Overload retVal="void" descr="Equivalent to &#34;Delay&#34;.">
                <Param name="delayTime: float" />
                <Param name="callback: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="delfile" func="yes">
            <Overload retVal="void" descr="Deletes the file in the supplied path, if no file exists, it errors.">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="delfolder" func="yes">
            <Overload retVal="void" descr="Deletes the folder in the supplied path, if no folder exists, it errors.">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="do" func="no" />
        <KeyWord name="DockWidgetPluginGuiInfo.new" func="yes">
            <Overload retVal="Drawing object" descr="
Returns a new DockWidgetPuginGuiInfo object. The DockWidgetPluginGuiInfo data type describes details for a DockWidgetPluginGui. This data type is used when constructing a PluginGui via the plugin&#34;s Plugin:CreateDockWidgetPluginGui() method. See documentation : https://create.roblox.com/docs/reference/engine/datatypes/DockWidgetPluginGuiInfo.
        ">
                <Param name="initDockState = Enum.InitialDockState.Right" />
                <Param name="initEnabled = false" />
                <Param name="overrideEnabledRestore = false" />
                <Param name="floatXSize = 0" />
                <Param name="floatYSize = 0" />
                <Param name="minWidth = 0" />
                <Param name="minHeight = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="Drawing.new" func="yes">
            <Overload retVal="Drawing object" descr="Creates a new drawing object with type. Returns the object. See documentation : https://docs.synapse.to/docs/reference/drawing_lib.html.">
                <Param name="string:type" />
            </Overload>
        </KeyWord>
        <KeyWord name="Drawing.Fonts" func="no" />
        <KeyWord name="dumpstring" func="yes" >
            <Overload retVal="string" descr="Returns the Synapse formatted bytecode for source string script.">
                <Param name="Script: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="ElapsedTime" func="no" />
        <KeyWord name="elapsedTime" func="no" />
        <KeyWord name="else" func="no" />
        <KeyWord name="elseif" func="no" />
        <KeyWord name="end" func="no" />
        <KeyWord name="error" func="yes" >
            <Overload retVal="void" descr="
Terminates the last protected function called and returns message as the error message. Function error never returns.

Usually, error adds some information about the error position at the beginning of the message. The level argument specifies how to get the error position. With level 1 (the default), the error position is where the error function was called. Level 2 points the error to where the function that called error was called; and so on. Passing a level 0 avoids the addition of error position information to the message. 
        ">
                <Param name="message: string" />
                <Param name="level: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="false" func="no" />
        <KeyWord name="firesignal" func="yes" >
            <Overload retVal="void" descr="Fires all the connections connected to the signal Signal with Args.">
                <Param name="Signal: ScriptSignal" />
                <Param name="Args: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="fireclickdetector" func="yes" >
            <Overload retVal="void" descr="Fires the designated ClickDetector with provided Distance. If Distance isn&#34;t provided, it will default to 0.">
                <Param name="Detector: ClickDetector" />
                <Param name="Distance: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="fireproximityprompt" func="yes" >
            <Overload retVal="void" descr="Fires the designated ProximityPrompt.">
                <Param name="Prompt: ProximityPrompt" />
                <Param name="Distance: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="firetouchinterest" func="yes" >
            <Overload retVal="void" descr="
Fakes a .Touched event to ToTouch with Part. The Toggle argument must be either 0 or 1 (for fire/un-fire).

Note: The ToTouch argument must have a child with class TouchTransmitter in order for this function to work.
        ">
                <Param name="Part: Instance" />
                <Param name="ToTouch: BasePart" />
                <Param name="Toggle: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="for" func="no" />
        <KeyWord name="function" func="no" />
        <KeyWord name="Faces.new" func="yes">
            <Overload retVal="Faces container" descr="
The Faces data type contains six booleans representing whether a feature is enabled for each face (NormalId) of a Part. In other words, this contains a boolean for each axes (X/Y/Z) in both directions (positive/negative). The Handles object uses this data type to enable whether a direction has a visible handle on a Part&#34;s face.
        ">
                <Param name="Args: Tuple&lt;NormalId&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="FloatCurveKey.new" func="yes">
            <Overload retVal="FloatCurveKey" descr="
A time-value pair used with FloatCurve instances.

The Interpolation property dictates the interpolation mode for the segment started by this key and ended by the next key on the curve. Each segment may use a different interpolation mode.

The LeftTangent and RightTangent properties apply to the cubic interpolation mode and define the desired tangent (slope) at the key. Different left and right values can be used to encode discontinuities in slope at the key. Attempting to set a RightTangent value on a key that doesn&#34;t use the cubic interpolation mode will result in a runtime error. It is possible to set the LeftTangent property on any key, as it will be used should the preceding segment use cubic interpolation.
        ">
                <Param name="time: number" />
                <Param name="value: number" />
                <Param name="Interpolation: Enum.KeyInterpolationMode" />
            </Overload>
        </KeyWord>
        <KeyWord name="Font.new" func="yes">
            <Overload retVal="Font" descr="Creates a new Font.">
                <Param name="family: Content" />
                <Param name="weight: Enum.FontWeight" />
                <Param name="weight: Enum.FontStyle" />
            </Overload>
        </KeyWord>
        <KeyWord name="Font.fromEnum" func="yes">
            <Overload retVal="Font" descr="Creates a Font from a Font value.">
                <Param name="font: Font" />
            </Overload>
        </KeyWord>
        <KeyWord name="Font.fromName" func="yes">
            <Overload retVal="Font" descr="Creates a Font from a name.">
                <Param name="name: string" />
                <Param name="weight: Enum.FontWeight" />
                <Param name="style: Enum.FontStyle" />
            </Overload>
        </KeyWord>
        <KeyWord name="Font.fromId" func="yes">
            <Overload retVal="Font" descr="Creates a Font from a name.">
                <Param name="id: number" />
                <Param name="weight: Enum.FontWeight" />
                <Param name="style: Enum.FontStyle" />
            </Overload>
        </KeyWord>
        <KeyWord name="gcinfo()" func="yes">
            <Overload retVal="number" descr="
Returns the total memory heap size in kilobytes. The number reflects the current heap consumption from the operating system perspective, which fluctuates over time as garbage collector frees objects.
"/>
        </KeyWord>
        <KeyWord name="getactors()" func="yes">
            <Overload retVal="table" descr="Returns a table of all actors in the current game."/>
        </KeyWord>
        <KeyWord name="getcallingscript()" func="yes">
            <Overload retVal="union&lt;LocalScript,ModuleScript,nil&gt;" descr="Gets the script that is calling this function."/>
        </KeyWord>
        <KeyWord name="get_calling_script()" func="yes">
            <Overload retVal="union&lt;LocalScript,ModuleScript,nil&gt;" descr="Gets the script that is calling this function."/>
        </KeyWord>
        <KeyWord name="getcallstack" func="yes">
            <Overload retVal="unknown" descr="unknown.">
                <Param name="thread: thread" />
                <Param name="arg2: unknown?" />
            </Overload>
        </KeyWord>
        <KeyWord name="getconnections" func="yes">
            <Overload retVal="table" descr="Gets a list of connections to the specified signal.">
                <Param name="signal: RBXScriptSignal" />
            </Overload>
        </KeyWord>
        <KeyWord name="getconstant" func="yes">
            <Overload retVal="variant" descr="Similar to debug.getconstant.">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="getconstants" func="yes">
            <Overload retVal="table" descr="Similar to debug.getconstants.">
                <Param name="fi: union&lt;function, number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getfenv" func="yes">
            <Overload retVal="table" descr="
Returns the current environment in use by the caller, as a dictionary.

If provided with a function, the environment of the function will be returned.
If provided with an integer, getfenv() will provide the environment of the function at the provided stack level: Level 1 is the function calling getfenv(). If stack is 0, getfenv() returns the global environment of the current script. When using getfenv() to get the current environment of a script, it will return the same table every time within the specific thread. 
        ">
                <Param name="stack: variant&lt;function, number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getmetatable" func="yes">
            <Overload retVal="variant" descr="
If object does not have a metatable, returns nil. Otherwise, if the object&#34;s metatable has a &#34;__metatable&#34; field, returns the associated value. Otherwise, returns the metatable of the given object. 
        ">
                <Param name="t: variant&lt;table, userdata&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getnamecallmethod()" func="yes">
            <Overload retVal="string" descr="Returns the namecall method if the function is called in an __namecall metatable hook."/>
        </KeyWord>
        <KeyWord name="getgc" func="yes">
            <Overload retVal="table" descr="
Returns all functions and userdata values within the GC. Passing true will also return tables.
            ">
                <Param name="include_tables: boolean?"/>
            </Overload>
        </KeyWord>
        <KeyWord name="getgenv()" func="yes">
            <Overload retVal="table" descr="Returns the game global environment."/>
        </KeyWord>
        <KeyWord name="gethiddenprop" func="yes">
            <Overload retVal="variant" descr="Returns the hidden property Property from Object. Errors if the property does not exist.">
                <Param name="Object: Instance" />
                <Param name="Property: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="gethiddenproperty" func="yes">
            <Overload retVal="variant" descr="Separate pointer to gethiddenprop.">
                <Param name="Object: Instance" />
                <Param name="Property: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="gethiddenprops" func="yes">
            <Overload retVal="table" descr="Returns a table of all hidden properties in Object.">
                <Param name="Object: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="gethiddenproperties" func="yes">
            <Overload retVal="table" descr="Separate pointer to gethiddenprops.">
                <Param name="Object: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="getinfo" func="yes">
            <Overload retVal="table" descr="Similar to debug.getinfo.">
                <Param name="fi: union&lt;function,number&gt;" />
                <Param name="tag: string = &#34;flnSu&#34;" />
            </Overload>    
        </KeyWord>
        <KeyWord name="getinstancefromstate" func="yes">
            <Overload retVal="Instance" descr="
(broken)returns the instance/script that runs/is running the thread (state). Will return nil if the state is made by the script executor.
        ">
                <Param name="state: state" />
            </Overload>
        </KeyWord>
        <KeyWord name="getinstances()" func="yes">
            <Overload retVal="table" descr="Returns a list of all instances within the game."/>
        </KeyWord>
        <KeyWord name="get_instances()" func="yes">
            <Overload retVal="table" descr="A seperate pointer to getinstances"/>
        </KeyWord>
        <KeyWord name="getloadedmodules()" func="yes">
            <Overload retVal="table" descr="Returns all ModuleScripts loaded in the game."/>
        </KeyWord>
        <KeyWord name="get_loaded_modules()" func="yes">
            <Overload retVal="table" descr="A seperate pointer to getloadedmodules."/>
        </KeyWord>
        <KeyWord name="getlocal" func="yes">
            <Overload retVal="variant" descr="Similar to debug.getlocal.">
                <Param name="level: int" />
                <Param name="localname: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="getlocals" func="yes">
            <Overload retVal="table" descr="Similar to debug.getlocals.">
                <Param name="level: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="getmenv" func="yes">
            <Overload retVal="table" descr="Equivalent to require(script).">
                <Param name="script: union&lt;LocalScript,ModuleScript&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getnilinstances()" func="yes">
            <Overload retVal="table" descr="Returns a list of all instances parented to nil within the game."/>
        </KeyWord>
        <KeyWord name="get_nil_instances()" func="yes">
            <Overload retVal="table" descr="A sepearate pointer to getnilinstances."/>
        </KeyWord>
        <KeyWord name="getpcdprop" func="yes">
            <Overload retVal="unknown" descr="unknown">
                <Param name="obj: TriangleMeshPart" />
                <Param name="arg2: unknown?" />
            </Overload>
        </KeyWord>
        <KeyWord name="getpointerfromstate" func="yes">
            <Overload retVal="pointer" descr="unknown, broken">
                <Param name="state: state" />
            </Overload>
        </KeyWord>
        <KeyWord name="getproperties" func="yes">
            <Overload retVal="table" descr="
Returns dictionary containing all properties of the given instance.
        ">
                <Param name="obj: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="getprops" func="yes">
            <Overload retVal="table" descr="Alias for getproperties.">
                <Param name="obj: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="getproto" func="yes">
            <Overload retVal="union&lt;function, table&lt;function>&gt;" descr="Similar to debug.getproto.">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: int" />
                <Param name="isActivated: boolean?" />
            </Overload>
        </KeyWord>
        <KeyWord name="getprotos" func="yes">
            <Overload retVal="table" descr="Similar to debug.getprotos.">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="getrawmetatable" func="yes">
            <Overload retVal="table" descr="Retrieve the metatable of value irregardless of value&#34;s metatable&#34;s __metatable field. Returns nil if it doesn&#34;t exist.">
                <Param name="value: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="getreg()" func="yes">
            <Overload retVal="table" descr="Returns the Lua registry."/>
        </KeyWord>
        <KeyWord name="getrenv()" func="yes">
            <Overload retVal="table" descr="Returns the Roblox global environment."/>
        </KeyWord>
        <KeyWord name="getrenv().debug.getmemorycategory()" func="yes">
            <Overload retVal="variant" descr="Returns the memory category of the LocalScript"/>
        </KeyWord>
        <KeyWord name="getscriptclosure" func="yes">
            <Overload retVal="function" descr="
Gets a bare function from the script passed. Please note this is not the original function of the script and will not have upvalues/enviornment correctly defined.">
                <Param name="Script: union&lt;LocalScript,ModuleScript&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getscripthash" func="yes">
            <Overload retVal="string" descr="
Returns a SHA384 hash of the scripts bytecode. You can use this to detect changes of a script.">
                <Param name="script: union&lt;LocalScript,ModuleScript&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getscripts()" func="yes">
            <Overload retVal="table" descr="Returns a list of all scripts within the game."/>
        </KeyWord>
        <KeyWord name="get_scripts()" func="yes">
            <Overload retVal="table" descr="A separate pointer to getscripts."/>
        </KeyWord>
        <KeyWord name="getsenv" func="yes">
            <Overload retVal="table" descr="
Returns the environment of Script. Errors if the script is not loaded in memory.
        ">
                <Param name="script: union&lt;LocalScript,ModuleScript&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getspecialinfo" func="yes">
            <Overload retVal="table" descr="
Gets a list of special properties for MeshParts, UnionOperations, and Terrain instances. See special properties https://docs.synapse.to/docs/reference/misc.html.
        ">
                <Param name="obj: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="getstack" func="yes">
            <Overload retVal="table" descr="Gets the method stack at level &#34;idx&#34;.">
                <Param name="idx" />
            </Overload>
        </KeyWord>
        <KeyWord name="getstateenv" func="yes">
            <Overload retVal="table" descr="
(broken)Returns the environment of &#34;state&#34; that MUST HAVE been obatined from getstates().
        ">
                <Param name="state: state" />
            </Overload>
        </KeyWord>
        <KeyWord name="getstates" func="yes">
            <Overload retVal="table" descr="Returns an array containing all states.">
            </Overload>
        </KeyWord>
        <KeyWord name="getsynasset" func="yes">
            <Overload retVal="Content" descr="
Returns a Content string that can be used as a fake Asset ID for GUI elements. Please note this will only affect your client.

Note: Certain instances only work with specific file types. For example, VideoFrame&#34;s only work with .webm encoded videos.
        ">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="getupvalue" func="yes">
            <Overload retVal="variant" descr="Retrieve the upvalues in function fi or at level fi.">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="getupvalues" func="yes">
            <Overload retVal="table" descr="Retrieve the upvalues in function fi or at level fi.">
                <Param name="fi: union&lt;function, number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="getvirtualinputmanager()" func="yes">
            <Overload retVal="VirtualInputManager" descr="Returns the VirtualInputManager service."/>
        </KeyWord>
        <KeyWord name="hookfunc" func="yes">
            <Overload retVal="function" descr="Copy of hookfunction.">
                <Param name="old: function" />
                <Param name="hook: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="hookfunction" func="yes">
            <Overload retVal="function" descr="
Hooks function old, replacing it with the function hook. The old function is returned, you must use this function in order to call the original function.
        ">
                <Param name="old: function" />
                <Param name="hook: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="hookmetamethod" func="yes">
            <Overload retVal="function" descr="
Hooks the metamethod passed in the object&#34;s metatable with hook. A function to call the original metamethod is returned, you must use this function in order to call the original metamethod.

This function will error if an object without a metatable is passed or a invalid metamethod is passed.
        ">
                <Param name="object: Object" />
                <Param name="metamethod: string" />
                <Param name="hook: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="if" func="no" />
        <KeyWord name="in" func="no" />
        <KeyWord name="identifyexecutor" func="yes">
            <Overload retVal="string" descr="Returns information about the executor."/>
        </KeyWord>
        <KeyWord name="Instance.new" func="yes">
            <Overload retVal="Instance" descr="
Creates an new object of type val. The parent argument is optional; If it is supplied, the object will be parented to that object.

Performance note: When the Parent of an object is set, Luau listens to a variety of different property changes for replication, rendering and physics. Therefore, it is recommended to set the Parent property last when creating new objects. As such, you should avoid using the second argument (parent) of this function. You can read this thread on the developer forum for more information.
        ">
                <Param name="ClassName: string" />
                <Param name="Parent: string?" />
            </Overload>
        </KeyWord>
        <KeyWord name="ipairs" func="yes">
            <Overload retVal="function,t,0" descr="
Returns three values: an iterator function, the table t and the number 0. Each time the iterator function is called, it returns the next numerical index-value pair in the table. When used in a generic for-loop, the return values can be used to iterate over each numerical index in the table.
        ">
                <Param name="t: Array" />
            </Overload>
        </KeyWord>
        <KeyWord name="isfile" func="yes">
            <Overload retVal="boolean" descr="Returns if path is a file or not.">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="isactor" func="yes">
            <Overload retVal="boolean" descr="Returns true if &#34;obj&#34; is an Actor.">
                <Param name="obj: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="isconnectionenabled" func="yes">
            <Overload retVal="boolean" descr="Returns true if &#34;con&#34; is connected to an Instance.">
                <Param name="con: RBXScriptSignal" />
            </Overload>
        </KeyWord>
        <KeyWord name="isfolder" func="yes">
            <Overload retVal="boolean" descr="Returns if path is a file or not.">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="islclosure" func="yes">
            <Overload retVal="boolean" descr="Returns true if f is an LClosure.">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="is_lclosure" func="yes">
            <Overload retVal="boolean" descr="Alias for islclosure.">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="isluau()" func="yes">
            <Overload retVal="boolean" descr="Returns true if the game is running luau."/>
        </KeyWord>
        <KeyWord name="is_protosmasher_caller" func="yes">
            <Overload retVal="boolean" descr="Returns whether the &#34;f&#34; is made by the script executor.">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="is_protosmasher_closure()" func="yes">
            <Overload retVal="boolean" descr="Returns whether the current closure is made by the script executor."/>
        </KeyWord>
        <KeyWord name="is_redirection_enabled()" func="yes">
            <Overload retVal="boolean" descr="unknown"/>
        </KeyWord>
        <KeyWord name="is_synapse_function" func="yes">
            <Overload retVal="boolean" descr="Similar to is_protosmasher_caller.">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="isnetworkowner" func="yes">
            <Overload retVal="boolean" descr="Returns true if the Part is owned by the player.">
                <Param name="Part: BasePart" />
            </Overload>
        </KeyWord>
        <KeyWord name="isrbxactive()" func="yes">
            <Overload retVal="boolean" descr="Returns true if the rbx client is active."/>
        </KeyWord>
        <KeyWord name="isreadonly" func="yes">
            <Overload retVal="boolean" descr="Returns t&#34;s read-only condition.">
                <Param name="t: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="isuntouched" func="yes">
            <Overload retVal="boolean" descr="Returns true if the Touched, which must contain a TouchTransmitter, is not touched when fired.">
                <Param name="obj: BasePart" />
            </Overload>
        </KeyWord>
        <KeyWord name="iswindowactive()" func="yes">
            <Overload retVal="boolean" descr="
Returns if the main window is in focus. This must return true for any other mouse/keyboard function to work.
        "/>
        </KeyWord>
        <KeyWord name="keypress" func="yes">
            <Overload retVal="void" descr="
Simulates a key press for the specified keycode. Keycodes are listed here:  https://docs.microsoft.com/en-us/windows/desktop/inputdev/virtual-key-codes.
        ">
                <Param name="keycode: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="keyrelease" func="yes">
            <Overload retVal="void" descr="
Releases key on the keyboard. see keycodes: https://docs.microsoft.com/en-us/windows/desktop/inputdev/virtual-key-codes
        ">
                <Param name="keycode: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="listfiles" func="yes">
            <Overload retVal="table" descr="Returns a table of files in folder.">
                <Param name="folder: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="loadfile" func="yes">
            <Overload retVal="&lt;union&lt;function,nil&gt;, &lt;string?&gt;&gt;" descr="
Loads in the contents of a file as a chunk and returns it if compilation is successful. Otherwise, if an error has occurred during compilation, nil followed by the error message will be returned.
        ">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="loadstring" func="yes">
            <Overload retVal="&lt;union&lt;function, nil&gt;, &lt;string?&gt;&gt;" descr="
Similar to load, but gets the chunk from the given string. To load and run a given string, use the idiom assert(loadstring(s))(). When absent, chunkname defaults to the given string. 
        ">
                <Param name="contents: string" />
                <Param name="chunkname: string?" />
            </Overload>
        </KeyWord>
        <KeyWord name="local" func="no" />
        <KeyWord name="make_readonly" func="yes">
            <Overload retVal="void" descr="Sets t&#34;s readonly state to true.">
                <Param name="t: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="make_writable" func="yes">
            <Overload retVal="void" descr="Sets t&#34;s readonly state to false.">
                <Param name="t: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="makefolder" func="yes">
            <Overload retVal="float" descr="Creates a new folder at path.">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.abs" func="yes">
            <Overload retVal="float" descr="Returns the absolute value of x.">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.acos" func="yes">
            <Overload retVal="float" descr="Returns the arc cosine of x (in radians).">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.asin" func="yes">
            <Overload retVal="float" descr="Returns the arc sine of x (in radians).">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.atan" func="yes">
            <Overload retVal="float" descr="Returns the arc tangent of x (in radians).">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.atan2" func="yes">
            <Overload retVal="float" descr="
Returns the arc tangent of y/x (in radians), but uses the signs of both parameters to 
find the quadrant of the result. (It also handles correctly the case of x being zero.) 
        ">
                <Param name="y: number" />
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.ceil" func="yes">
            <Overload retVal="float" descr="Returns the smallest integer larger than or equal to x.">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.clamp" func="yes">
            <Overload retVal="float" descr="Returns a number between min and max, inclusive.">
                <Param name="x: number" />
                <Param name="min: number" />
                <Param name="max: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.cos" func="yes">
            <Overload retVal="float" descr="Returns the cosine of x (assumed to be in radians).">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.cosh" func="yes">
            <Overload retVal="float" descr="Returns the hyperbolic cosine of x. ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.deg" func="yes">
            <Overload retVal="float" descr="Returns the angle x (given in radians) in degrees. ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.exp" func="yes">
            <Overload retVal="float" descr="Returns the value ex. ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.floor" func="yes">
            <Overload retVal="float" descr="Returns the largest integer smaller than or equal to x. ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.fmod" func="yes">
            <Overload retVal="float" descr="
Returns the remainder of the division of x by y that rounds the quotient towards zero. 
        ">
                <Param name="x: number" />
                <Param name="y: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.frexp" func="yes">
            <Overload retVal="float" descr="
Returns m and e such that x = m2e, e is an integer and the absolute value of m is in 
the range [0.5, 1) (or zero when x is zero). 
        ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.huge" func="no" />
        <KeyWord name="math.ldexp" func="yes">
            <Overload retVal="float" descr="Returns m2e (e should be an integer). ">
                <Param name="m" />
                <Param name="e" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.log" func="yes">
            <Overload retVal="float" descr="Returns the natural logarithm of x. ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.log10" func="yes">
            <Overload retVal="float" descr="Returns the base-10 logarithm of x. ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.max" func="yes">
            <Overload retVal="float" descr="Returns the maximum value among its arguments. ">
                <Param name="x: number" />
                <Param name="nums: Tuple&lt;number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.min" func="yes">
            <Overload retVal="float" descr="Returns the minimum value among its arguments. ">
                <Param name="x: number" />
                <Param name="nums: Tuple&lt;number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.modf" func="yes">
            <Overload retVal="float" descr="
Returns two numbers, the integral part of x and the fractional part of x. 
        ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.noise" func="yes">
            <Overload retVal="float" descr="
Returns a perlin noise value. The returned value is most often between the range [-1, 1].

The returned value is sometimes will be outside of the range [-1,1], so if the interval is critical to you, you should use math.clamp(noise, -1, 1) on the output.

If you leave arguments out, they will be interpreted as zero, so math.noise(1.158) is equivalent to math.noise(1.158, 0, 0) and math.noise(1.158, 5.723) is equivalent to math.noise(1.158, 5.723, 0).

The function uses a perlin noise algorithm to assign fixed values to coordinates. For example, math.noise(1.158, 5.723) will always return 0.48397532105446 and math.noise(1.158, 6) will always return 0.15315161645412.

If x, y and z are all integers, the return value will be 0. For fractional values of x, y and z, the return value will gradually fluctuate between -0.5 and 0.5. For coordinates that are close to each other, the return values will also be close to each other.
        ">
                <Param name="x: number" />
                <Param name="y: number" />
                <Param name="z: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.pi" func="no" />
        <KeyWord name="math.pow" func="yes">
            <Overload retVal="float" descr="
Returns xy. (You can also use the expression x^y to compute this value.) 
        ">
                <Param name="x: number" />
                <Param name="y: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.rad" func="yes">
            <Overload retVal="float" descr="Returns the angle x (given in degrees) in radians.">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.random" func="yes">
            <Overload retVal="int" descr="
This function is an interface to the simple pseudo-random generator function rand 
provided by ANSI C. (No guarantees can be given for its statistical properties.)

When called without arguments, returns a uniform pseudo-random real number in the 
range [0,1). When called with an integer number m, math.random returns a uniform 
pseudo-random integer in the range [1, m]. When called with two integer numbers m and 
n, math.random returns a uniform pseudo-random integer in the range [m, n]. 
        ">
                <Param name="min: number = 0" />
                <Param name="max: number = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.randomseed" func="yes">
            <Overload retVal="void" descr="
Sets x as the &#34;seed&#34; for the pseudo-random generator: equal seeds produce equal 
sequences of numbers. 
        ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.sin" func="yes">
            <Overload retVal="float" descr="Returns the sine of x (assumed to be in radians">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.sinh" func="yes">
            <Overload retVal="float" descr="Returns the hyperbolic sine of x. ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.sqrt" func="yes">
            <Overload retVal="float" descr="
Returns the square root of x. (You can also use the expression x^0.5 to compute this value.) 
        ">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.tan" func="yes">
            <Overload retVal="float" descr="Returns the tangent of x (assumed to be in radians).">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.tanh" func="yes">
            <Overload retVal="float" descr="Returns the hyperbolic tangent of x.">
                <Param name="x: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="messagebox" func="yes">
            <Overload retVal="uint" descr="
Creates a message box with parameters text, caption and style. See style: https://docs.synapse.to/docs/reference/misc.html.
        ">
                <Param name="text: string" />
                <Param name="text: caption" />
                <Param name="uint: flags" />
            </Overload>
        </KeyWord>
        <KeyWord name="messageboxasync" func="yes">
            <Overload retVal="uint" descr="Similar to messagebox.">
                <Param name="text: string" />
                <Param name="text: caption" />
                <Param name="uint: flags" />
            </Overload>
        </KeyWord>
        <KeyWord name="mouse1click()" func="yes">
            <Overload retVal="void" descr="Simulates a full left mouse button press."/>
        </KeyWord>
        <KeyWord name="mouse1press()" func="yes">
            <Overload retVal="void" descr="Simulates a left mouse button press without release."/>
        </KeyWord>
        <KeyWord name="mouse1release()" func="yes">
            <Overload retVal="void" descr="Simulates a left mouse button release."/>
        </KeyWord>
       <KeyWord name="mouse2click()" func="yes">
            <Overload retVal="void" descr="Simulates a full right mouse button press."/>
        </KeyWord>
        <KeyWord name="mouse2press()" func="yes">
            <Overload retVal="void" descr="Simulates a right mouse button press without release."/>
        </KeyWord>
        <KeyWord name="mouse2release()" func="yes">
            <Overload retVal="void" descr="Simulates a right mouse button release."/>
        </KeyWord>
        <KeyWord name="mousemoveabs" func="yes">
            <Overload retVal="void" descr="
Move&#34;s your mouse to the x and y coordinates in pixels from topleft of the main window.
        ">
                <Param name="x: number" />
                <Param name="y: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="mousemoverel" func="yes">
            <Overload retVal="void" descr="
Moves the mouse cursor relatively to the current mouse position by coordinates x and y.
        ">
                <Param name="x: number" />
                <Param name="y: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="mousescroll" func="yes">
            <Overload retVal="void" descr="Scrolls the mouse wheel virtually by px pixels.">
                <Param name="px: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="next" func="yes">
            <Overload retVal="variant,variant" descr="
Returns the first key/value pair in the array. If a lastKey argument was specified then returns the next element in the array based on the key that provided. The order in which the indices are enumerated is not specified, even for numeric indices. To traverse a table in numeric order, use a numerical for loop or ipairs.

The behavior of next is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may, however, modify existing fields. In particular, you may clear existing fields.
        ">
                <Param name="t: table" />
                <Param name="lastKey: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="newcclosure" func="yes">
            <Overload retVal="function" descr="Pushes a new CClosure that invokes function f upon call.">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="newproxy" func="yes">
            <Overload retVal="userdata" descr="Creates a blank userdata, with the option for it to have a metatable.">
                <Param name="addMetatable: boolean" />
            </Overload>
        </KeyWord>
        <KeyWord name="nil" func="no" />
        <KeyWord name="NumberSequence.new" func="yes">
            <Overload retVal="tuple" descr="
The NumberSequence data type represents a series of number values from 0 to 1. The number values are expressed using the NumberSequenceKeypoint type. This type is used in properties such as ParticleEmitter.Size and Beam.Transparency to define a numerical change over time.
        ">
                <Param name="union&lt;Array:Keypoints, int:&lt;n0, n1?&gt;&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="NumberSequenceKeypoint.new" func="yes">
            <Overload retVal="NumberSequenceKeypoint" descr="
Returns a keypoint with the specified time, value, (and envelope).
        ">
                <Param name="time: number" />
                <Param name="value: number" />
                <Param name="envelope: number?" />
            </Overload>
        </KeyWord>
        <KeyWord name="NumberRange.new" func="yes">
            <Overload retVal="num,num" descr="
Returns a new NumberRange with the provided minimum and maximum. The minimum must be less than or equal to maximum.
        ">
                <Param name="min: number" />
                <Param name="max: number = min" />
            </Overload>
        </KeyWord>
        <KeyWord name="not" func="no" />
        <KeyWord name="or" func="no" />
        <KeyWord name="os.clock" func="yes">
            <Overload retVal="float" descr="Returns an approximation of the amount in seconds of CPU time used by the program."/>
        </KeyWord>
        <KeyWord name="os.date" func="yes">
            <Overload retVal="string" descr="
Returns a string or a table containing date and time, formatted according to the given string format.

If the time argument is present, this is the time to be formatted (see the os.time function 
for a description of this value). Otherwise, date formats the current time.

If format starts with &#34;!&#34;, then the date is formatted in Coordinated Universal Time. After this 
optional character, if format is the string &#34;*t&#34;, then date returns a table with the following fields: 
year (four digits), 
month (1--12), 
day (1--31), 
hour (0--23), 
min (0--59), 
sec (0--61), 
wday (weekday, Sunday is 1), 
yday (day of the year), and 
isdst (daylight saving flag, a boolean).

If format is not &#34;*t&#34;, then date returns the date as a string, formatted according to the same 
rules as the C function strftime.

When called without arguments, date returns a reasonable date and time representation that 
depends on the host system and on the current locale (that is, os.date() is equivalent to os.date(&#34;%c&#34;)). 
        ">
                <Param name="format: string" />
                <Param name="time: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.difftime" func="yes">
            <Overload retVal="float" descr="
Returns the number of seconds from time t1 to time t2. In POSIX, Windows, and some other systems, 
this value is exactly t2-t1. 
        ">
                <Param name="t2: table" />
                <Param name="t1: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.time" func="yes">
            <Overload retVal="float" descr="
Returns the current time when called without arguments, or a time representing the date and time specified 
by the given table. This table must have fields year, month, and day, and may have fields hour, min, sec, 
and isdst (for a description of these fields, see the os.date function).

The returned value is a number, whose meaning depends on your system. In POSIX, Windows, and some other 
systems, this number counts the number of seconds since some given start time (the &#34;epoch&#34;). 
In other systems, the meaning is not specified, and the number returned by time can be used only as an 
argument to date and difftime. 
        ">
                <Param name="t: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="OverlapParams.new" func="yes">
            <Overload retVal="OverlapParams object" descr="
The OverlapParams data type stores parameters for use with WorldRoot boundary-querying functions, in particular WorldRoot:GetPartBoundsInBox(), WorldRoot:GetPartBoundsInRadius() and WorldRoot:GetPartsInPart(). The OverlapParams.FilterDescendantsInstances property stores an array of objects to use as either an inclusion or exclusion list based on the OverlapParams.FilterType enum, and the OverlapParams.CollisionGroup property can specify a collision group for the boundary query operation.

Unlike most data types in Luau, you can change all of the members of OverlapParams without creating a new object, allowing you to reuse the same object repeatedly.
        ">
            </Overload>
        </KeyWord>
        <KeyWord name="pairs" func="yes">
            <Overload retVal="function,table" descr="
Returns an iterator function which iterates over the input table via a linked list with keys. Calling format is equivalent to ipairs.
        ">
                <Param name="t: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="PathWaypointAction.new" func="yes">
            <Overload retVal="PathWaypointAction object" descr="
The PathWaypoint data type constructed by a PathWaypointAction action, Vector3 position, and string label which is used by the PathfindingService to create points along a generated path.
        ">
                <Param name="position: Vector3" />
                <Param name="action: Enum.PathWaypointAction" />
                <Param name="label: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="pcall" func="yes">
            <Overload retVal="boolean,variant" descr="
Calls function f with the given arguments in protected mode. This means that any error 
inside f is not propagated; instead, pcall catches the error and returns a status code. 
Its first result is the status code (a boolean), which is true if the call succeeds without 
errors. In such case, pcall also returns all results from the call, after this first result. 
In case of any error, pcall returns false plus the error message. 
        ">
                <Param name="f: function" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="PhysicalProperties.new" func="yes">
            <Overload retVal="PhysicalProperties container" descr="
The PhysicalProperties data type describes several physical properties of a BasePart: Density, Elasticity, and Friction. It is used in the similarly-named property.

Weighting Behavior
PhysicalProperties also provides weightings properties, ElasticityWeight and FrictionWeight. When two parts interact, the friction and elasticity between them are determined in the same way by the following pairwise weighted average function:

(Friction_a * FrictionWeight_a + Friction_b * FrictionWeight_b) / (FrictionWeight_a + FrictionWeight_b)

Although the formula above refers to the Friction and FrictionWeight of two parts, A and B, the formula is used in the same manner when determining Elasticity. Generally, when the weight of A is much greater than that of B, the actual value will be closer to A. If the weights are similar, the actual value will be close to the midpoint between their individual values.
        ">
                <Param name="union&lt;Enum.Material:material, number:density&gt;" />
                <Param name="friction: number?" />
                <Param name="elasticity: number?" />
                <Param name="frictionWeight: number?" />
                <Param name="elasticityWeight: number?" />
            </Overload>
        </KeyWord>
        <KeyWord name="PluginDrag.new" func="yes">
            <Overload retVal="PluginDrag" descr="drag object for plugins (?)"/>
        </KeyWord>
        <KeyWord name="PluginManager" func="yes">
            <Overload retVal="PluginManager" descr="
        Returns the PluginManager which is a deprecated singleton that was previously required to create plugins. It still has applicable uses, such as if you need to create a Plugin object from Roblox Studio&#34;s command bar.
            "/>
        </KeyWord>
        <KeyWord name="print" func="yes">
            <Overload retVal="void" descr="
Receives any number of arguments, and prints their values to stdout, using the tostring 
function to convert them to strings. print is not intended for formatted output, but only 
as a quick way to show a value, typically for debugging. For formatted output, use string.format. 
        ">
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="printconsole" func="yes">
            <Overload retVal="void" descr="
Prints message into the internal and integrated console with RGB value. To view the internal console, enable Internal UI in the Options menu and when in-game press INSERT on your keyboard. The integrated console can be found in the new synapse UI.
        ">
                <Param name="message: string" />
                <Param name="red: byte" />
                <Param name="green: byte" />
                <Param name="blue: byte" />
            </Overload>
        </KeyWord>
        <KeyWord name="printidentity" func="yes">
            <Overload retVal="void" descr="
Prints Current identity is [ID] to the output, where [ID] corresponds to the current th&#34;s security context level.
        ">
                <Param name="prefix: string = &#34;Current identity is&#34;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Random.new" func="yes">
            <Overload retVal="pseudorandom generator" descr="
Returns a new Random object. If the seed parameter is not specified, it will use a seed pulled from an internal entropy source.
        ">
                <Param name="seed: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="Ray.new" func="yes">
            <Overload retVal="boolean" descr="Returns a Ray with the given Origin and Direction.">
                <Param name="origin: Vector3" />
                <Param name="direction: Vector3" />
            </Overload>
        </KeyWord>
        <KeyWord name="RaycastParams.new" func="yes">
            <Overload retVal="RaycastParams obj" descr="
The RaycastParams data type stores parameters for WorldRoot:Raycast() operations. The FilterDescendantsInstances property stores an array of objects to use as either an inclusion or exclusion list based on the RaycastParams.FilterType enum. If desired, the RaycastParams.IgnoreWater property can be used to ignore Terrain water, and the RaycastParams.CollisionGroup property can specify a collision group for the raycasting operation.

This object is different from the similarly named RaycastResult which provides the results of a raycast.

Unlike most data types in Luau, you can change all of the members of RaycastParams without creating a new object, allowing you to reuse the same object repeatedly.
        "></Overload>
        </KeyWord>
        <KeyWord name="rawequal" func="yes">
            <Overload retVal="boolean" descr="
Checks whether v1 is equal to v2, without invoking any metamethod. Returns a boolean. 
        ">
                <Param name="v1: variant" />
                <Param name="v2: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="rawget" func="yes">
            <Overload retVal="variant" descr="
Gets the real value of t[idx], without invoking any metamethod. idx may be any value. 
        ">
                <Param name="t: table" />
                <Param name="idx: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="rawset" func="yes">
            <Overload retVal="table" descr="
Sets the real value of t[idx] to val, without invoking any metamethod. t must 
be a table, idx any value different from nil, and val any Lua value.

This function returns t. 
        ">
                <Param name="t: table" />
                <Param name="idx: variant" />
                <Param name="val: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="rconsoleclear()" func="yes">
            <Overload retVal="void" descr="Clears the console."/>
        </KeyWord>
        <KeyWord name="rconsoleinput()" func="yes">
            <Overload retVal="string" descr="Yields until the user inputs information into their console. Returns the input they put in."/>
        </KeyWord>
        <KeyWord name="rconsoleinputasync()" func="yes">
            <Overload retVal="string" descr="Similar to rconsoleinput."/>
        </KeyWord>
        <KeyWord name="rconsolename" func="yes">
            <Overload retVal="void" descr="Sets the currently allocated console title to title.">
                <Param name="title: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="rconsoleprint" func="yes">
            <Overload retVal="void" descr="Prints message into the console. rconsoleprint also supports colors. ">
                <Param name="message: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="rconsoleinfo" func="yes">
            <Overload retVal="void" descr="Prints message into the console, with a info text before it.">
                <Param name="message: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="rconsolewarn" func="yes">
            <Overload retVal="void" descr="Prints message into the console, with a warning text before it.">
                <Param name="message: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="rconsoleerr" func="yes">
            <Overload retVal="void" descr="Prints message into the console, with an error text before it.">
                <Param name="message: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="readbinarystring" func="yes">
            <Overload retVal="variant" descr="Parses a string-sequenc of bytes for some purpose. See example of usage https://v3rmillion.net/showthread.php?tid=1055548">
                <Param name="obj: Instance" />
                <Param name="prop: Property" />
            </Overload>
        </KeyWord>
        <KeyWord name="readfile" func="yes">
            <Overload retVal="string" descr="
Reads the contents of the file located at path and returns it. If the file does not exist, it errors.
        ">
                <Param name="path: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="Rect.new" func="yes">
            <Overload retVal="Rect object" descr="
The Rect describes a rectangle on a 2D plane. It is constructed using two of its corners, either using two Vector2 form or as four numbers. The Rect data type is used in the ImageLabel.SliceCenter property, which determines the center area of a scaled image.
        ">
                <Param name="union&lt;Vector2:min, number&lt;minX = 0,minY = 0>&gt;" />
                <Param name="union&lt;Vector2:max, number&lt;maxX = 0,maxY = 0>&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Region3" func="yes">
            <Overload retVal="Region3 object" descr="
The Region3 data type describes a volume in 3D space similar to an axis-aligned rectangular prism. It is commonly used with Terrain functions and functions that detect parts within a volume, such as WorldRoot:FindPartsInRegion3().

The prism&#34;s center is accessible using the Region3.CFrame property and the prism&#34;s size is accessible through the Region3.Size property. Note that the components of this property may be negative.

The Region3:ExpandToGrid() method returns a new Region3 whose bounds comply with a provided resolution value. The resulting volume may be equal to or greater than the original volume, but never smaller.
        ">
                <Param name="min: Vector3" />
                <Param name="max: Vector3" />
            </Overload>
        </KeyWord>
        <KeyWord name="Region3int16" func="yes">
            <Overload retVal="Region3int16 object" descr="
Not to be confused with Region3, a separate class that fulfills a different purpose.

The Region3int16 data type represents a volume in 3D space similar to an axis-aligned rectangular prism. It uses two Vector3int16 to store the volume&#34;s bounds in the Min and Max properties. It is constructed using Region3int16.new(Min, Max), given the two Vector3int16 bounds. This data type features no functions or operations.
        ">
                <Param name="min: Vector3int16" />
                <Param name="max: Vector3int16" />
            </Overload>
        </KeyWord>
        <KeyWord name="repeat" func="no" />
        <KeyWord name="replaceclosure" func="yes" >
            <Overload retVal="void" descr="replaces closure A with closure B.">
                <Param name="A: function" />
                <Param name="B: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="require" func="yes">
            <Overload retVal="variant" descr="
Loads the given module. The function starts by looking into the package.loaded table to 
determine whether modname is already loaded. If it is, then require returns the value stored 
at package.loaded[modname]. Otherwise, it tries to find a loader for the module.

To find a loader, require is guided by the package.loaders array. By changing this array, 
we can change how require looks for a module. The following explanation is based on the 
default configuration for package.loaders.

First require queries package.preload[modname]. If it has a value, this value (which should 
be a function) is the loader. Otherwise require searches for a Lua loader using the path 
stored in package.path. If that also fails, it searches for a C loader using the path stored 
in package.cpath. If that also fails, it tries an all-in-one loader (see package.loaders).

Once a loader is found, require calls the loader with a single argument, modname. If the 
loader returns any value, require assigns the returned value to package.loaded[modname]. 
If the loader returns no value and has not assigned any value to package.loaded[modname], 
then require assigns true to this entry. In any case, require returns the final value of 
package.loaded[modname].

If there is any error loading or running the module, or if it cannot find any loader for 
the module, then require signals an error. 
        ">
                <Param name="ModuleScript:module" />
            </Overload>
        </KeyWord>
        <KeyWord name="return" func="no" />
        <KeyWord name="RotationCurveKey.new" func="yes">
            <Overload retVal="RotationCurveKey" descr="Returns a RotationCurveKey object that represents a rotation, used by a RotationCurve Instance."/>
        </KeyWord>
        <KeyWord name="saveinstance" func="yes">
            <Overload retVal="void" descr="
Saves the current game into your workspace folder. You can use table t to customize options for this. See format of t:
* mode : optimied/full/scripts
* noscripts : true/false
* scriptcache : true/false
* timeout : any number
        ">
                <Param name="t: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="select" func="yes">
            <Overload retVal="Tuple" descr="
If index is a number, returns all arguments after argument number index. Otherwise, index 
must be the string &#34;#&#34;, and select returns the total number of extra arguments it received. 
        ">
                <Param name="index: variant" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="setclipboard" func="yes">
            <Overload retVal="void" descr="Sets contents to the windows clipboard.">
                <Param name="content: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="setconstant" func="yes">
            <Overload retVal="void" descr="Set constant idx to tuple value at level or function fi.">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: union&lt;string, int&gt;" />
                <Param name="value: union&lt;number, boolean, nil, string&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="setfenv" func="yes">
            <Overload retVal="variant" descr="
Sets the environment to be used by the given function. f can be a Lua function or a number 
that specifies the function at that stack level: Level 1 is the function calling setfenv. 
setfenv returns the given function.

As a special case, when f is 0 setfenv changes the environment of the running thread. 
In this case, setfenv returns no values. 
        ">
                <Param name="fi: union&lt;function,int&gt;" />
                <Param name="fenv: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="setfflag" func="yes">
            <Overload retVal="void" descr="
Sets FFlag with Value. Must be run before the game loads, auto execute + auto launch recommended.
        ">
                <Param name="FFlag: string" />
                <Param name="Value: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="setfpscap" func="yes">
            <Overload retVal="void" descr="Sets &#34;cap&#34; to the games&#34;s FPS cap.">
                <Param name="cap: number" />
            </Overload>
        </KeyWord>
        <KeyWord name="sethiddenprop" func="yes">
            <Overload retVal="void" descr="Alias for sethiddenproperty.">
                <Param name="Object: Instance" />
                <Param name="Property: string" />
                <Param name="Value: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="sethiddenproperty" func="yes">
            <Overload retVal="void" descr="
Sets the hidden property Property with Value from Object. Errors if the property does not exist.
        ">
                <Param name="Object: Instance" />
                <Param name="Property: string" />
                <Param name="Value: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="setlocal" func="yes">
            <Overload retVal="void" descr="Set local localname to value value at level lvl.">
                <Param name="level: int" />
                <Param name="localname: string" />
                <Param name="value: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="setmetatable" func="yes">
            <Overload retVal="metatable" descr="
Sets the metatable for the given table t to newMeta. If newMeta is nil, the metatable of t is removed. Finally, this function returns the table t which was passed to it. If t already has a metatable whose __metatable metamethod is set, calling this on t raises an error.
        ">
                <Param name="t: table" />
                <Param name="newMeta: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="setnamecallmethod" func="yes">
            <Overload retVal="void" descr="
Sets the current namecall method to the new namecall method. Must be called in a __namecall metatable hook.
        ">
                <Param name="method: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="setrawmetatable" func="yes">
            <Overload retVal="boolean" descr="
Sets o&#34;s metatable to mt even if the __metatable field exists in o&#34;s metatable.
        ">
                <Param name="o: object" />
                <Param name="mt: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="setreadonly" func="yes">
            <Overload retVal="void" descr="Sets t&#34;s read-only value to val.">
                <Param name="t: table" />
                <Param name="val: boolean" />
            </Overload>
        </KeyWord>
        <KeyWord name="setscriptable" func="yes">
            <Overload retVal="void" descr="Sets property &#34;prop&#34; in obj to &#34;scriptable&#34;.">
                <Param name="obj: Instance" />
                <Param name="prop: Property" />
                <Param name="scriptable: boolean" />
            </Overload>
        </KeyWord>
        <KeyWord name="setstack" func="yes">
            <Overload retVal="void" descr="Alias for debug.setstack">
                <Param name="fi: union&lt;function, int&gt;" />
                <Param name="idx: int" />
                <Param name="val: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="settings()" func="yes">
            <Overload retVal="GlobalSettings" descr="Returns the GlobalSettings object, which can be used to access the settings objects that are used in Roblox Studio&#34;s settings menu."/>
        </KeyWord>
        <KeyWord name="setuntouched" func="yes">
            <Overload retVal="void" descr="Sets the untouched value of obj to isUntouched.">
                <Param name="obj: BasePart" />
                <Param name="isUntouched: boolean" />
            </Overload>
        </KeyWord>
        <KeyWord name="setupvalue" func="yes">
            <Overload retVal="void" descr="Alias for debug.setupvalue">
                <Param name="fi: union&lt;function, number&gt;" />
                <Param name="idx: union&lt;string, int&gt;" />
                <Param name="value: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="Spawn" func="yes">
            <Overload retVal="void" descr="
Runs the specified callback function in a separate thread, without yielding the current thread.

The function will be executed the next time Roblox&#34;s Task Scheduler runs an update cycle. This delay will take at least 29 milliseconds but can arbitrarily take longer, depending on the target framerate and various throttling conditions.

The callback function is invoked with two arguments:

The first being the amount of time which elapsed from when spawn was called to when the function was invoked.
The second being equivalent to elapsedTime() or roughly how long the engine has been running.
        ">
                <Param name="callback: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="spawn" func="yes">
            <Overload retVal="void" descr="Equivalent to &#34;Spawn&#34;.">
                <Param name="callback: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="Stats()" func="yes">
            <Overload retVal="Stats" descr="Returns the Stats service. It is preferred that developers use ServiceProvider:GetService() to retrieve it instead."/>
        </KeyWord>
        <KeyWord name="stats()" func="yes">
            <Overload retVal="Stats" descr="Equivalent to &#34;Stats&#34;."/>
        </KeyWord>
        <KeyWord name="string.byte" func="yes">
            <Overload retVal="int" descr="
Returns the internal numerical codes of the characters s[i], s[i+1], ···, s[j]. The default 
value for i is 1; the default value for j is i.

Note that numerical codes are not necessarily portable across platforms. 
        ">
                <Param name="s: string" />
                <Param name="i: number = 1" />
                <Param name="j: number = i" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.char" func="yes">
            <Overload retVal="string" descr="
Receives zero or more integers. Returns a string with length equal to the number of arguments, 
in which each character has the internal numerical code equal to its corresponding argument.

Note that numerical codes are not necessarily portable across platforms. 
        ">
                <Param name="nums: Tuple&lt;number&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.dump" func="yes">
            <Overload retVal="string" descr="
Returns a string containing a binary representation of the given function, so that a later 
loadstring on this string returns a copy of the function. function must be a Lua function 
without upvalues. 
        ">
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.find" func="yes">
            <Overload retVal="int, int" descr="
Looks for the first match of pattern in the string s. If it finds a match, then find returns 
the indices of s where this occurrence starts and ends; otherwise, it returns nil. A third, 
optional numerical argument init specifies where to start the search; its default value is 1 
and can be negative. A value of true as a fourth, optional argument plain turns off the 
pattern matching facilities, so the function does a plain &#34;find substring&#34; operation, with 
no characters in pattern being considered &#34;magic&#34;. Note that if plain is given, then init 
must be given as well.

If the pattern has captures, then in a successful match the captured values are also returned, 
after the two indices. 
        ">
                <Param name="s: string" />
                <Param name="pattern: string" />
                <Param name="init: number = 1" />
                <Param name="plain: boolean = false" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.format" func="yes">
            <Overload retVal="string" descr="
Returns a formatted version of its variable number of arguments following the description 
given in its first argument (which must be a string). The format string follows the same 
rules as the printf family of standard C functions. The only differences are that the options/modifiers 
*, l, L, n, p, and h are not supported and that there is an extra option, q. The q option formats 
a string in a form suitable to be safely read back by the Lua interpreter: the string is 
written between double quotes, and all double quotes, newlines, embedded zeros, and backslashes 
in the string are correctly escaped when written. For instance, the call

     string.format(&#34;%q&#34;, &#34;a string with &#34;&#34;quotes&#34;&#34; and \n new line&#34;)

will produce the string:

     &#34;a string with \&#34;&#34;quotes\&#34;&#34; and \
      new line&#34;

The options c, d, E, e, f, g, G, i, o, u, X, and x all expect a number as argument, whereas 
q and s expect a string.

This function does not accept string values containing embedded zeros, except as arguments 
to the q option. 
        ">
                <Param name="format: string" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.gmatch" func="yes">
            <Overload retVal="function" descr="
Returns an iterator function that, each time it is called, returns the next captures from 
pattern over string s. If pattern specifies no captures, then the whole match is produced 
in each call.

As an example, the following loop

     s = &#34;hello world from Lua&#34;
     for w in string.gmatch(s, &#34;%a+&#34;) do
       print(w)
     end

will iterate over all the words from string s, printing one per line. The next example collects 
all pairs key=value from the given string into a table:

     t = {}
     s = &#34;from=world, to=Lua&#34;
     for k, v in string.gmatch(s, &#34;(%w+)=(%w+)&#34;) do
       t[k] = v
     end

For this function, a &#34;^&#34; at the start of a pattern does not work as an anchor, as this would 
prevent the iteration. 
        ">
                <Param name="s: string" />
                <Param name="pattern: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.gsub" func="yes">
            <Overload retVal="string, int" descr="
Returns a copy of s in which all (or the first n, if given) occurrences of the pattern have 
been replaced by a replacement string specified by repl, which can be a string, a table, or 
a function. gsub also returns, as its second value, the total number of matches that occurred.

Look at the online documentation for this function.
">
                <Param name="s: string" />
                <Param name="pattern: string" />
                <Param name="repl: variant" />
                <Param name="n: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.len" func="yes">
            <Overload retVal="int" descr="
Receives a string and returns its length. The empty string &#34;&#34; has length 0. Embedded zeros are 
counted, so &#34;a\000bc\000&#34; has length 5. 
        ">
                <Param name="s: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.lower" func="yes">
            <Overload retVal="string" descr="
Receives a string and returns a copy of this string with all uppercase letters changed to 
lowercase. All other characters are left unchanged. The definition of what an uppercase 
letter is depends on the current locale. 
        ">
                <Param name="s: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.match" func="yes">
            <Overload retVal="string" descr="
Looks for the first match of pattern in the string s. If it finds one, then match returns the 
captures from the pattern; otherwise it returns nil. If pattern specifies no captures, then 
the whole match is returned. A third, optional numerical argument init specifies where to 
start the search; its default value is 1 and can be negative. 
        ">
                <Param name="s: string" />
                <Param name="pattern: string" />
                <Param name="init: int = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.pack" func="yes">
            <Overload retVal="string" descr="
Returns a binary string containing the provided arguments. The description in the first argument, which must be a string, determines the way the remaining arguments are packed.
        ">
                <Param name="format: string" />
                <Param name="args: Tuple&lt;string&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.packsize" func="yes">
            <Overload retVal="int" descr="
Returns the size in bytes of any string packed with a given description. You can&#34;t use s and z because they have variable lengths.
        ">
                <Param name="format: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.rep" func="yes">
            <Overload retVal="string" descr="
Returns a string that is the concatenation of n copies of the string s. 
        ">
                <Param name="s: string" />
                <Param name="n: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.reverse" func="yes">
            <Overload retVal="string" descr="
Returns a string that is the string s reversed. 
        ">
                <Param name="s: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.split" func="yes">
            <Overload retVal="table" descr="
Splits a string into parts based on the defined separator character(s), returning a table of ordered results. By default, the separator character is , but you can specify an alternative character or series of characters.

If an empty &#34;slice&#34; is located, that part will be returned as an empty string. Also note that whitespace from the original string will be preserved.
        ">
                <Param name="s: string" />
                <Param name="separator: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.sub" func="yes">
            <Overload retVal="string" descr="
Returns the substring of s that starts at i and continues until j; i and j can be negative. 
If j is absent, then it is assumed to be equal to -1 (which is the same as the string length). 
In particular, the call string.sub(s,1,j) returns a prefix of s with length j, and string.sub(s, -i) 
returns a suffix of s with length i. 
        ">
                <Param name="s: string" />
                <Param name="i: int = 1" />
                <Param name="j: int = -1" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.unpack" func="yes">
            <Overload retVal="string" descr="
Extracts the values packed in the provided binary string based on the description in the first argument. The description should match the one originally used to pack the string. The optional third parameter determines the byte at which the reading starts.
        ">
                <Param name="format: string" />
                <Param name="data: string" />
                <Param name="readStart: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.upper" func="yes">
            <Overload retVal="string" descr="
Receives a string and returns a copy of this string with all lowercase letters changed to 
uppercase. All other characters are left unchanged. The definition of what a lowercase letter 
is depends on the current locale. 
        ">
                <Param name="s: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.cache_replace" func="yes">
            <Overload retVal="void" descr="Replace obj in the instance cache with t_obj.">
                <Param name="obj: Instance" />
                <Param name="t_obj: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.cache_invalidate" func="yes">
            <Overload retVal="void" descr="Returns the current thread identity.">
                <Param name="obj: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.get_thread_identity" func="yes">
            <Overload retVal="uint" descr="Returns the current thread identity."></Overload>
        </KeyWord>
        <KeyWord name="syn.set_thread_identity" func="yes">
            <Overload retVal="void" descr="Sets the current thread identity.">
                <Param name="n: uint" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.is_cached" func="yes">
            <Overload retVal="boolean" descr="Returns true if obj is currently cached within the registry.">
                <Param name="obj: Instance" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.write_clipboard" func="yes">
            <Overload retVal="void" descr="Writes content to the current Windows clipboard.">
                <Param name="content: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.queue_on_teleport" func="yes">
            <Overload retVal="void" descr="Executes code after player is teleported.">
                <Param name="code: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.protect_gui" func="yes">
            <Overload retVal="void" descr="
        Protects GUI from recursive FindFirstChild-style attacks. After you call the function, recursive FFA calls from non-Synapse contexts will skip over your protected instances and all children of such instances.
        ">
                <Param name="GUI: &lt;screen gui&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.unprotect_gui" func="yes">
            <Overload retVal="void" descr="Removes protection from the GUI. Errors if gui isn&#34;t already protected.">
                <Param name="GUI: &lt;screen gui&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.request" func="yes">
            <Overload retVal="table" descr="
            Sends a http request with parameters in options. See Headers and Request/Response Dictionairy Fields : https://docs.synapse.to/docs/reference/syn_lib.html">
                <Param name="options: table" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.create_secure_function" func="yes">
            <Overload retVal="string" descr="
Protects your code with secure function, making it much more difficult for others to alter or view your code. This function can only be used by users who have been given access.
        ">
                <Param name="code: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.run_secure_function" func="yes">
            <Overload retVal="string" descr="Runs code protected by secure function.">
                <Param name="code: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.secure_call" func="yes">
            <Overload retVal="variant:..." descr="
        Spoofs caller environment and context when calling func with script&#34;s environment. You can pass as many arguments args as is required. secure_call returns whatever the called function returns.
        You can also pass a table to script if you wish to customize how the call will occur.
        ">
                <Param name="f: function" />
                <Param name="script: union&lt;LocalScript, ModuleScript, table>" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="syn.websocket.connect" func="yes">
            <Overload retVal="object" descr="
        Connects to the url specified. Errors if the connection fails. See websocket Methods and Events : https://docs.synapse.to/docs/reference/websocket_lib.html.
        ">
                <Param name="url: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.clear" func="yes">
            <Overload retVal="void" descr="
Sets the value for all keys within the given table to nil. This causes the # operator to return 0 for the given table. The allocated capacity of the table&#34;s array portion is maintained, which allows for efficient re-use of the space.
        ">
                <Param name="t: array" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.clone" func="yes">
            <Overload retVal="table" descr="
Returns an unfrozen shallow copy of the provided table.
        ">
                <Param name="t: array" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.concat" func="yes">
            <Overload retVal="string" descr="
Given an array where all elements are strings or numbers, returns table[i]..sep..table[i+1] ··· sep..table[j]. 
The default value for sep is the empty string, the default for i is 1, and the default for j is the length 
of the table. If i is greater than j, returns the empty string. 
        ">
                <Param name="t: array" />
                <Param name="sep: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.create" func="yes">
            <Overload retVal="array" descr="
Creates a table with the array portion allocated to the given number of elements, optionally filled with the given value.
        ">
                <Param name="count: int" />
                <Param name="value: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.find" func="yes">
            <Overload retVal="variant" descr="
Within the given array-like table haystack, find the first occurrence of value needle, starting from index init or the beginning if not provided. If the value is not found, nil is returned.

A linear search algorithm is performed.
        ">
                <Param name="haystack: array" />
                <Param name="needle: int" />
                <Param name="init: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.foreach" func="yes">
            <Overload retVal="void" descr="Iterates over the provided table, passing the key and value of each iteration over to the provided function.">
                <Param name="t: array" />
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.foreachi" func="yes">
            <Overload retVal="void" descr="This is similar to table.foreach() except that index-value pairs are passed, not key-value pairs.">
                <Param name="t: array" />
                <Param name="f: function" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.array" func="yes">
            <Overload retVal="table" descr="
This function makes the given table read-only, effectively &#34;freezing&#34; it in its current state. Attempting to modify a frozen table throws an error.

This freezing effect is shallow, which means that you can write to a table within a frozen table. To deep freeze a table, call this function recursively on all of the descending tables.
        ">
                <Param name="t: array" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.getn" func="yes">
            <Overload retVal="int" descr="Returns the number of elements in the table passed.">
                <Param name="t: array" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.insert" func="yes">
            <Overload retVal="void" descr="
Inserts element value at position pos in table, shifting up other elements to open space, if necessary. 
The default value for pos is n+1, where n is the length of the table (see §2.5.5), 
so that a call table.insert(t,x) inserts x at the end of table t. 
        ">
                <Param name="t: array" />
                <Param name="pos: int = #t" />
                <Param name="value: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.isfrozen" func="yes">
            <Overload retVal="boolean" descr="
This function returns true if the given table is frozen and false if it isn&#34;t frozen. You can freeze tables using table.freeze().
        ">
                <Param name="t: array" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.maxn" func="yes">
            <Overload retVal="int" descr="
Returns the largest positive numerical index of the given table, or zero if the table has no 
positive numerical indices. (To do its job this function does a linear traversal of the whole table.) 
        ">
                <Param name="t: array" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.move" func="yes">
            <Overload retVal="table" descr="
Copies elements from table src into table dst. Is equivalent to the multiple assignment statement: dst[t], ... = src[a], ..., src[b].

The default for dst is src. The destination range may overlap with the source range. Returns dst for convenience.
        ">
                <Param name="src: array" />
                <Param name="a: int" />
                <Param name="b: int" />
                <Param name="t: int" />
                <Param name="dst: array" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.pack" func="yes">
            <Overload retVal="variant" descr="
Returns a new table with all arguments stored into keys 1, 2, etc. and with a field &#34;n&#34; with the total number of arguments. Note that the resulting table may not be a sequence.
        ">
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.remove" func="yes">
            <Overload retVal="variant" descr="
Removes from table the element at position pos, shifting down other elements to close the space, 
if necessary. Returns the value of the removed element. The default value for pos is n, where n 
is the length of the table, so that a call table.remove(t) removes the last element of table t. 
        ">
                <Param name="t: array" />
                <Param name="pos: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.sort" func="yes">
            <Overload retVal="void" descr="
Sorts table elements in a given order, in-place, from table[1] to table[n], where n is the length 
of the table. If comp is given, then it must be a function that receives two table elements, and 
returns true when the first is less than the second (so that not comp(a[i+1],a[i]) will be true 
after the sort). If comp is not given, then the standard Lua operator lessthan is used instead.

The sort algorithm is not stable; that is, elements considered equal by the given order may have 
their relative positions changed by the sort. 
        ">
                <Param name="t: array" />
                <Param name="comp: function?" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.unpack" func="yes">
            <Overload retVal="tuple" descr="
Returns the elements from the given list. By default, i is 1 and j is the length of list. This same functionality is also provided by the built-in unpack function.
        ">
                <Param name="list: array" />
                <Param name="i: int" />
                <Param name="j: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="task.spawn" func="yes">
            <Overload retVal="thread" descr="
Accepts a function or a thread (as returned by coroutine.create) and calls/resumes it immediately through the engine&#34;s scheduler. Arguments after the first are sent to the function/thread. This function does not return any value, even if the provided function returns one immediately.

This function is based on the fastSpawn pattern rather than being a replacement for the deprecated global spawn function. It is recommended that this function be used in place of fastSpawn.
        ">
                <Param name="call: union&lt;function,thread&gt;" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="task.defer" func="yes">
            <Overload retVal="thread" descr="
Accepts a function or a thread (as returned by coroutine.create) and defers it until the next resumption cycle, at which point it is resumed with the engine&#34;s scheduler like with task.spawn(). Arguments after the first are sent to the function/thread. This function does not return any value, even if the provided function returns one immediately.

This function should be used when a similar behavior to task.spawn() is desirable, but the thread does not need to run immediately.
        ">
                <Param name="call: union&lt;function,thread&gt;" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="task.delay" func="yes">
            <Overload retVal="thread" descr="
Accepts a function or a thread (as returned by coroutine.create) and schedules it to be called/resumed on the next Heartbeat after the given amount of time in seconds has elapsed. Arguments after the second are sent to the function/thread.

This function differs from the deprecated global delay function in that no throttling occurs: on the very same Heartbeat step in which enough time has passed, the function is guaranteed to be called/resumed. Providing a duration of zero (0) will guarantee that the function is called on the very next Heartbeat.

You can calculate the actual time passed by calling os.clock() upon scheduling and in the scheduled function.
        ">
                <Param name="duration: int" />
                <Param name="call: union&lt;function,thread&gt;" />
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="task.desynchronize" func="yes">
            <Overload retVal="void" descr="
Causes the following code to be run in parallel. If the script is already running in parallel, no change occurs. For more information, see Parallel Luau : https://create.roblox.com/docs/scripting/luau/parallel-luau.
        ">
            </Overload>
        </KeyWord>
        <KeyWord name="task.synchronize" func="yes">
            <Overload retVal="void" descr="
Causes the following code to be run in serial. If the script is already running in serial, no change occurs. For more information, see Parallel Luau : https://create.roblox.com/docs/scripting/luau/parallel-luau.
        "/>
        </KeyWord>
        <KeyWord name="task.wait" func="yes">
            <Overload retVal="float" descr="
Yields the current thread until the given duration (in seconds) has elapsed, then resumes the thread on the next Heartbeat step. The actual amount of time elapsed is returned.

If no duration is given, it will default to zero (0). This means the thread resumes on the very next step, which is equivalent in behavior to RunService.Heartbeat:Wait()

Unlike the deprecated global wait, this function does not throttle and guarantees the resumption of the thread on the first Heartbeat that occurs when it is due. This function also only returns the elapsed time and nothing else.
        ">
                <Param name="duration: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="task.cancel" func="yes">
            <Overload retVal="void" descr="
Cancels a thread and closes it, preventing it from being resumed manually or by the task scheduler.

This function can be used with other members of the task library that return a thread to cancel them before they are resumed.
        ">
                <Param name="thread: thread" />
            </Overload>
        </KeyWord>
        <KeyWord name="then" func="no" />
        <KeyWord name="tick()" func="yes">
            <Overload retVal="float" descr="
Returns how much time has elapsed, in seconds, since the UNIX epoch, on the current local session&#34;s computer. The UNIX epoch is represented by the date January 1st, 1970."/>
        </KeyWord>
        <KeyWord name="time()" func="yes">
            <Overload retVal="float" descr="Returns the amount of time, in seconds, that has elapsed since the current game instance started running. If the current game instance is not running, this will be 0."/>
        </KeyWord>
        <KeyWord name="tonumber" func="yes">
            <Overload retVal="variant" descr="
Attempts to convert the arg into a number with a specified base to interpret the value in. If it cannot be converted, this function returns nil.

The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter &#34;A&#34; (in either upper or lower case) represents 10, &#34;B&#34; represents 11, and so forth, with &#34;Z&#34; representing 35. In base 10 (the default), the number may have a decimal part, as well as an optional exponent part. In other bases, only unsigned integers are accepted.

If a string begins with 0x and a base is not provided, the 0x is trimmed and the base is assumed to be 16, or hexadecimal.
        ">
                <Param name="arg: variant" />
                <Param name="base: number = 10" />
            </Overload>
        </KeyWord>
        <KeyWord name="tostring" func="yes">
            <Overload retVal="string" descr="
Receives an argument of any type and converts it to a string in a reasonable format. For complete control of how numbers are converted, use string.format. If the metatable of e has a __tostring metamethod, then it will be called with e as the only argument and will return the result.
        ">
                <Param name="e: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="true" func="no" />
        <KeyWord name="type" func="yes">
            <Overload retVal="string" descr="
Returns the type of its only argument, coded as a string. The possible results of this function are &#34;nil&#34; (a string, not the value nil), &#34;number&#34;, &#34;string&#34;, &#34;boolean&#34;, &#34;table&#34;, &#34;function&#34;, &#34;thread&#34;, and &#34;userdata&#34;. 
        ">
                <Param name="val: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="typeof" func="yes">
            <Overload retVal="string" descr="
Returns the type of the object specified, as a string. This function is more accurate than Lua&#34;s native type function, as it does not denote Roblox-specific types as userdata.
        ">
                <Param name="val: variant" />
            </Overload>
        </KeyWord>
        <KeyWord name="TweenInfo.new" func="yes">
            <Overload retVal="TweenInfo object" descr="Creates a new TweenInfo from the provided parameters.">
                <Param name="time: int = 1" />
                <Param name="easingStyle: EasingStyle = Enum.EasingStyle.Quad" />
                <Param name="easingDirection: EasingDirection = Enum.EasingDirection.Out" />
                <Param name="repeatCount: int = 0" />
                <Param name="reverses: boolean = false" />
                <Param name="delayTime: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="UDim.new" func="yes">
            <Overload retVal="UDim2 object" descr="Returns a new UDim from the given components.">
                <Param name="Scale: int = 0" />
                <Param name="Offset: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="UDim2.new" func="yes">
            <Overload retVal="UDim2 object" descr="
        Returns a new UDim2 given the coordinates of the two UDim components representing each axis.">
                <Param name="xScale: int = 0" />
                <Param name="xOffset: int = 0" />
                <Param name="yScale: int = 0" />
                <Param name="yOffset: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="UDim2.fromScale" func="yes">
            <Overload retVal="UDim2 object" descr="
        Returns a new UDim2 with the given scale components and no offsets.
        ">
                <Param name="xScale: int = 0" />
                <Param name="yScale: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="UDim2.fromOffset" func="yes">
            <Overload retVal="UDim2 object" descr="
        Returns a new UDim2 with the given offset components and no scales.
        ">
                <Param name="xOffset: int = 0" />
                <Param name="yOffset: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="unpack" func="yes">
            <Overload retVal="variant" descr="
Returns the elements from the given table. By default, i is 1 and j is the length of list, as defined by the length operator.
        ">
                <Param name="list: table" />
                <Param name="i: int" />
                <Param name="j: int" />                
            </Overload>
        </KeyWord>
        <KeyWord name="unlockmodulescript" func="yes">
            <Overload retVal="unknown" desc="unlocks the provided modulescript">
                <Param name="script: ModuleScript" />
            </Overload>
        </KeyWord>
        <KeyWord name="until" func="no" />
        <KeyWord name="UserSettings" func="yes">
            <Overload retVal="UserSettings" descr="
Returns the UserSettings object, which is used to read information from the current user&#34;s game menu settings.
        "/>
        </KeyWord>
        <KeyWord name="utf8.char" func="yes">
            <Overload retVal="string" descr="
Receives zero or more codepoints as integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
        ">
                <Param name="nums: Tuple&lt;nums&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="utf8.codes" func="yes">
            <Overload retVal="function,&#34;str&#34;,0" descr="
Returns an iterator function that will iterate over all codepoints in string &#34;str&#34;. It raises an error if it meets any invalid byte sequence.
        ">
                <Param name="str: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="utf8.codepoint" func="yes">
            <Overload retVal="tuple&lt;int&gt;" descr="
Returns the codepoints (as integers) from all codepoints in the provided string (str) that start between byte positions i and j (both included). The default for i is 1 and for j is i. It raises an error if it meets any invalid byte sequence.
        ">
                <Param name="str: string" />
                <Param name="i: int = 1" />
                <Param name="j: int = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="utf8.len" func="yes">
            <Overload retVal="number" descr="
Returns the number of UTF-8 codepoints in the string str that start between positions i and j (both inclusive). The default for i is 1 and for j is -1. If it finds any invalid byte sequence, returns a nil value plus the position of the first invalid byte.
        ">
                <Param name="str: string" />
                <Param name="i: int = 1" />
                <Param name="j: int = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="utf8.offset" func="yes">
            <Overload retVal="number" descr="
Returns the position (in bytes) where the encoding of the n-th codepoint of s (counting from byte position i) starts. A negative n gets characters before position i. The default for i is 1 when n is non-negative and #s + 1 otherwise, so that utf8.offset(s, -n) gets the offset of the n-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns nil.
        ">
                <Param name="str: string" />
                <Param name="n: int" />
                <Param name="i: int = 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="utf8.graphemes" func="yes">
            <Overload retVal="function" descr="Returns an iterator function that will iterate the grapheme clusters of the string.">
                <Param name="str: string" />
                <Param name="i: int" />
                <Param name="j: int" />
            </Overload>
        </KeyWord>
        <KeyWord name="utf8.nfcnormalize" func="yes">
            <Overload retVal="string" descr="Converts the input string to Normal Form C, which tries to convert decomposed characters into composed characters.">
                <Param name="str: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="utf8.nfdnormalize" func="yes">
            <Overload retVal="string" descr="Converts the input string to Normal Form D, which tries to break up composed characters into decomposed characters.">
                <Param name="str: string" />
            </Overload>
        </KeyWord>
        <KeyWord name="validfgwindow()" func="yes">
            <Overload retVal="boolean" descr="Returns true if Roblox is the foreground window."/>
        </KeyWord>
        <KeyWord name="Vector2.new" func="yes">
            <Overload retVal="Vector2 object" descr="The Vector2 data type represents a 2D value with direction and magnitude. Some applications include GUI elements and 2D mouse positions.">
                <Param name="x: int = 0" />
                <Param name="y: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="Vector3.new" func="yes">
            <Overload retVal="Vector3 object" descr="
The Vector3 data type represents a vector in 3D space, typically usually used as a point in 3D space or the dimensions of a rectangular prism. Vector3 supports basic component-based arithmetic operations (sum, difference, product, and quotient) and these operations can be applied on the left or right hand side to either another Vector3 or a number. It also features methods for common vector operations, such as Cross() and Dot(). See documentation : https://create.roblox.com/docs/reference/engine/datatypes/Vector3
        ">
                <Param name="x: int = 0" />
                <Param name="y: int = 0" />
                <Param name="z: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="Vector3.fromNormalId" func="yes">
            <Overload retVal="Vector3 object" descr="Returns a new Vector3 in the given orthogonal direction.">
                <Param name="normal: Enum.NormalId" />
            </Overload>
        </KeyWord>
        <KeyWord name="Vector3.fromAxis" func="yes">
            <Overload retVal="Vector3 object" descr="Returns a new Vector3 for the given axis.">
                <Param name="axis: Enum.Axis" />
            </Overload>
        </KeyWord>
        <KeyWord name="Vector3int16.new" func="yes">
            <Overload retVal="Vector3int16 object" descr="
The Vector3int16 data type represents a vector in 3D space with a signed 16-bit integer for its components. It is similar to Vector3 in that it allows for the same arithmetic operations, but it lacks commonly used vector functions. See documentation : https://create.roblox.com/docs/reference/engine/datatypes/Vector3int16.
        ">
                <Param name="x: int = 0" />
                <Param name="y: int = 0" />
                <Param name="z: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="Vector2int16.new" func="yes">
            <Overload retVal="Vector3int16 object" descr="
The Vector2int16 data type represents a vector in 2D space with a signed 16-bit integer for its components. It is similar to Vector2 in that it allows for the same arithmetic operations, but it lacks commonly used vector functions. See documentation : https://create.roblox.com/docs/reference/engine/datatypes/Vector2int16.
        ">
                <Param name="x: int = 0" />
                <Param name="y: int = 0" />
            </Overload>
        </KeyWord>
        <KeyWord name="Version()" func="yes">
            <Overload retVal="string" descr="
Returns the current version of Roblox as a string. The integers in the version string are separated by periods, and each integers represent the following, in order:

Generation - The current generation of the application shell that is hosting the client.
Version - The current release version of Roblox.
Patch - The current patch number for this version of Roblox.
Commit - The ID of the last internal commit that was accepted into this version of the client.
        "/>
        </KeyWord>
        <KeyWord name="version()" func="yes">
            <Overload retVal="string" descr="Equivalent to &#34;Version&#34;."/>
        </KeyWord>
        <KeyWord name="Wait" func="yes">
            <Overload retVal="number,number" descr="
Yields the current thread until the specified amount of seconds have elapsed.

The delay will have a minimum duration of 29 milliseconds, but this minimum may be higher depending on the target framerate and various throttling conditions. If the seconds parameter is not specified, the minimum duration will be used. This function returns:

Actual time yielded (in seconds).
Total time since the software was initialized (in seconds).
        ">
                <Param name="seconds: float" />
            </Overload>
        </KeyWord>
        <KeyWord name="Wait" func="yes">
            <Overload retVal="number,number" descr="Equivalent to &#34;Wait&#34;.">
                <Param name="seconds: float" />
            </Overload>
        </KeyWord>
        <KeyWord name="warn" func="yes">
            <Overload retVal="void" descr="
Behaves identically to Lua&#34;s print function, except the output is styled as a warning, with yellow text and a timestamp. This function accepts any number of arguments, and will attempt to convert them into strings which will then be joined together with spaces between them.
        ">
                <Param name="args: Tuple&lt;variant&gt;" />
            </Overload>
        </KeyWord>
        <KeyWord name="while" func="no" />
        <KeyWord name="writefile" func="yes" >
            <Overload retVal="void" descr="
Writes contents to the supplied path.

Extensions that are not allowed: .exe, .scr, .bat, .com, .csh, .msi, .vb, .vbs, .vbe, .ws, .wsf, .wsh, .ps1, .psy. Attempting to call this function with those extensions will error.
        ">
                <Param name="path: string" />
                <Param name="contents: string" />
            </Overload>
        </KeyWord>/>
        <KeyWord name="xpcall" func="yes">
            <Overload retVal="boolean,variant" descr="
This function is similar to pcall, except that you can set a new error handler.

xpcall() calls function f in protected mode, using err as the error handler, and passes a list of arguments. Any error inside f is not propagated; instead, xpcall() catches the error, calls the err function with the original error object, and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In this case, xpcall() also returns all results from the call, after this first result. In case of any error, xpcall() returns false plus the result from err.
        ">
                <Param name="f: function" />
                <Param name="err: function" />
                <Param name="args: Tuple" />
            </Overload>
        </KeyWord>
        <KeyWord name="_G" func="no"/>
        <KeyWord name="_VERSION" func="no"/>
        <KeyWord name="Enum" func="no"/>
        <KeyWord name="game" func="no"/>
        <KeyWord name="plugin" func="no"/>
        <KeyWord name="shared" func="no"/>
        <KeyWord name="script" func="no"/>
        <KeyWord name="Workspace" func="no"/>
    </AutoComplete>
</NotepadPlus>
